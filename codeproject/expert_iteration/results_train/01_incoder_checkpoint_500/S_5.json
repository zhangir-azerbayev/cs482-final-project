{"num_solved": 113, "log": [{"task_id": 66, "solution": "\ndef pos_count(list): \n    return sum(1 for num in list if num > 0)"}, {"task_id": 90, "solution": "\ndef len_log(list1): \n    longest = 0\n    for word in list1: \n        if len(word) > longest: \n            longest = len(word)\n    return longest "}, {"task_id": 101, "solution": "\ndef kth_element(arr, n, k): \n    return arr[n-1] if k > len(arr) else arr[k-1]"}, {"task_id": 109, "solution": "\ndef odd_Equivalent(s,n): \n    count = 0 \n    for i in range(0,len(s)):\n        if s[i] == '1':\n            count += 1\n    return count "}, {"task_id": 126, "solution": "\ndef sum(a,b): \n    sum = 0\n    for i in range(1,a+1): \n        if a % i == 0 and b % i == 0:\n            sum = sum + i\n    return sum"}, {"task_id": 204, "solution": "\ndef count(s,c) : \n    return s.count(c) "}, {"task_id": 224, "solution": "\ndef count_Set_Bits(n): \n    return bin(n)[2:].count('1')"}, {"task_id": 228, "solution": "\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n    return ((n&(1<<l)!=0)|((n>>l)!=0))&((n>>r)!=0)"}, {"task_id": 250, "solution": "\ndef count_X(tup, x): \n    return sum(1 for e in tup if e == x)"}, {"task_id": 253, "solution": "\ndef count_integer(list1): \n    return sum(1 for _ in list1 if isinstance(_, int))"}, {"task_id": 329, "solution": "\ndef neg_count(list): \n    return len([i for i in list if i < 0])"}, {"task_id": 352, "solution": "\ndef unique_Characters(str): \n    uniqueChars = set(str) \n    return len(uniqueChars) == len(str) "}, {"task_id": 425, "solution": "\ndef count_element_in_list(list1, x): \n    return sum(1 for sublist in list1 if x in sublist) "}, {"task_id": 517, "solution": "\ndef largest_pos(list1): \n    largest_pos = max(list1) \n    return largest_pos "}, {"task_id": 554, "solution": "\ndef Split(list): \n    return [i for i in list if i % 2!= 0]"}, {"task_id": 591, "solution": "\ndef swap_List(newList): \n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList"}, {"task_id": 625, "solution": "\ndef swap_List(newList): \n  temp = newList[0]\n  newList[0] = newList[-1]\n  newList[-1] = temp\n  return newList"}, {"task_id": 629, "solution": "\ndef Split(list): \n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even"}, {"task_id": 653, "solution": "\nfrom collections import defaultdict\r\ndef grouping_dictionary(l): \r\n    grouped_dict = defaultdict(list)\r\n    for k, v in l:\r\n        grouped_dict[k].append(v)\r\n    return grouped_dict"}, {"task_id": 666, "solution": "\ndef count_char(string,char): \n    return string.count(char)"}, {"task_id": 700, "solution": "\ndef count_range_in_list(li, min, max): \n    return sum(1 for item in li if item >= min and item <= max)"}, {"task_id": 741, "solution": "\ndef all_Characters_Same(s) : \n    return all(s[i] == s[i+1] for i in range(len(s)-1))"}, {"task_id": 791, "solution": "\ndef remove_nested(test_tup): \n    return tuple(x for x in test_tup if not isinstance(x, tuple))"}, {"task_id": 862, "solution": "\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n): \r\n    words = Counter(re.findall(r\"\\b\\w+\\b\", text))\r\n    return words.most_common(n)"}, {"task_id": 897, "solution": "\ndef is_Word_Present(sentence,word): \n    return word in sentence"}, {"task_id": 932, "solution": "\ndef remove_duplic_list(l): \n    seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]"}, {"task_id": 947, "solution": "\ndef len_log(list1): \n    return min(len(x) for x in list1) "}, {"task_id": 954, "solution": "\ndef profit_amount(actual_cost,sale_amount): \n    if actual_cost - sale_amount < 0:\n        return None\n    return actual_cost - sale_amount"}, {"task_id": 25, "solution": "\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n): \n        product *= arr[i] \n    return product "}, {"task_id": 130, "solution": "\nfrom collections import defaultdict\r\ndef max_occurrences(nums): \r\n    freq = defaultdict(int) \r\n    for x in nums: \r\n        freq[x] += 1\r\n    return max(freq.items(), key=lambda x: x[1])"}, {"task_id": 145, "solution": "\ndef max_Abs_Diff(arr,n): \n    diff=arr[0]-arr[n-1]\n    for i in range(1,n-1):\n        diff=max(diff,abs(arr[i]-arr[i-1]))\n    return diff"}, {"task_id": 188, "solution": "\ndef prod_Square(n): \n    if (n==1) or (n==2) or (n==3) or (n==4) or (n==5) or (n==6) or (n==7) or (n==8) or (n==9) or (n==10) or (n==11) or (n==12) or (n==13) or (n==14) or (n==15) or (n==16) or (n==17) or (n==18) or (n==19) or (n==20) or (n==21): \n        return True\n    else: \n        return False"}, {"task_id": 203, "solution": "\ndef hamming_Distance(n1,n2) : \n    return int(bin(n1 ^ n2)[2:].count('1')) "}, {"task_id": 446, "solution": "\nfrom collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    return sum(1 for _ in tup if _ in lst) "}, {"task_id": 564, "solution": "\ndef count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"}, {"task_id": 631, "solution": "\nimport re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text): \r\n    return re.sub(r'[ ]+', '_', text)"}, {"task_id": 808, "solution": "\ndef check_K(test_tup, K): \n    return any(map(lambda x:x==K,test_tup))"}, {"task_id": 831, "solution": "\ndef count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]==arr[j]: \n                count += 1\n    return count "}, {"task_id": 891, "solution": "\ndef same_Length(A,B): \n    return len(str(A))==len(str(B))"}, {"task_id": 913, "solution": "\nimport re\r\ndef end_num(string): \r\n    return re.search(r'\\d+$', string) is not None"}, {"task_id": 942, "solution": "\ndef check_element(test_tup, check_list): \n    for x in check_list:\n        if x in test_tup:\n            return True\n    return False"}, {"task_id": 964, "solution": "\ndef word_len(s): \n    return len(s)%2==0"}, {"task_id": 23, "solution": "\ndef maximum_Sum(list1): \n    maximum = 0\n    for x in list1: \n        maximum = max(maximum, sum(x))\n    return maximum"}, {"task_id": 141, "solution": "\ndef pancake_sort(nums): \n    sorted_nums = sorted(nums) \n    return sorted_nums"}, {"task_id": 175, "solution": "\ndef is_valid_parenthese( str1): \n    paren_count = 0\n    for c in str1: \n        if c == '(': \n            paren_count += 1\n        elif c == ')': \n            paren_count -= 1\n    return paren_count == 0"}, {"task_id": 227, "solution": "\ndef min_of_three(a,b,c): \n    return min(a,b,c) "}, {"task_id": 331, "solution": "\ndef count_unset_bits(n): \n    return bin(n).replace(\"0b\",\"\").count(\"0\")"}, {"task_id": 377, "solution": "\ndef remove_Char(s,c) : \n    return \"\".join(i for i in s if i!= c)"}, {"task_id": 672, "solution": "\ndef max_of_three(num1,num2,num3): \n    if num1>num2 and num1>num3: \n        return num1 \n    elif num2>num3 and num2>num1: \n        return num2 \n    else: \n        return num3 "}, {"task_id": 93, "solution": "\ndef power(a,b): \n    return a ** b "}, {"task_id": 127, "solution": "\ndef multiply_int(x, y): \n    return x * y"}, {"task_id": 192, "solution": "\ndef check_String(str): \n  if str.isalpha() == False and str.isdigit() == False: \n    return True\n  else: \n    return False"}, {"task_id": 302, "solution": "\ndef set_Bit_Number(n): \n    return n & (n - 1) "}, {"task_id": 332, "solution": "\ndef char_frequency(str1): \n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count"}, {"task_id": 362, "solution": "\ndef max_occurrences(nums): \n    return max(nums, key=nums.count)"}, {"task_id": 605, "solution": "\ndef prime_num(num): \n    if num > 2:\n        if num % 2 == 0:\n            return False\n        else:\n            return True\n    else:\n        return False"}, {"task_id": 658, "solution": "\ndef max_occurrences(list1): \n    return max(list1, key=list1.count)"}, {"task_id": 687, "solution": "\ndef recur_gcd(a, b): \n    if (b == 0): \n        return a \n    return recur_gcd(b, a % b)"}, {"task_id": 768, "solution": "\ndef check_Odd_Parity(x): \n    if (x & 1) == 0: \n        return False \n    else: \n        return True"}, {"task_id": 855, "solution": "\ndef check_Even_Parity(x): \n    if (x & 1 == 0): \n        return True\n    else:\n        return False"}, {"task_id": 868, "solution": "\ndef length_Of_Last_Word(a): \n    return len(a.split(\" \")[-1])"}, {"task_id": 207, "solution": "\ndef find_longest_repeating_subseq(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count"}, {"task_id": 384, "solution": "\ndef frequency_Of_Smallest(n,arr): \n    count = 0\n    for i in arr:\n        if i == min(arr):\n            count += 1\n    return count"}, {"task_id": 113, "solution": "\ndef check_integer(text): \n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"}, {"task_id": 414, "solution": "\ndef overlapping(list1,list2): \n    list1.sort()\n    list2.sort()\n    return list1==list2"}, {"task_id": 576, "solution": "\ndef is_Sub_Array(A,B,n,m): \n    if (len(A)!= len(B)): \n        return False\n    for i in range(n):\n        if (A[i]!= B[i]):\n            return False\n    return True"}, {"task_id": 856, "solution": "\ndef find_Min_Swaps(arr,n) : \n    swaps = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if arr[i] > arr[j] :\n                swaps += 1\n    return swaps"}, {"task_id": 316, "solution": "\ndef find_last_occurrence(A, x): \n    i = len(A) - 1\n    while A[i] > x:\n        i -= 1\n    return i"}, {"task_id": 428, "solution": "\ndef shell_sort(my_list): \n    my_list.sort() \n    return my_list "}, {"task_id": 195, "solution": "\ndef first(arr,x,n): \n    i=0\n    while i<n and arr[i]<x: \n        i=i+1\n    return i"}, {"task_id": 403, "solution": "\nimport re\r\ndef is_valid_URL(str): \r\n    pattern = re.compile(r\"^\\w+://[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$\")\r\n    return bool(pattern.match(str))"}, {"task_id": 550, "solution": "\ndef find_Max(arr,low,high): \n    if (low >= high):\n        return -1\n    mid = (low + high) // 2\n    if (arr[mid] > arr[high]):\n        return arr[mid]\n    return arr[high]"}, {"task_id": 71, "solution": "\ndef comb_sort(nums): \n    sorted_nums = sorted(nums) \n    return sorted_nums "}, {"task_id": 815, "solution": "\ndef sort_by_dnf(arr, n): \n    arr.sort()\n    for i in range(n): \n        if arr[i]!= 2: \n            arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i] \n    return arr"}, {"task_id": 179, "solution": "\ndef is_num_keith(x): \n    return ((x%2==0)^((x//2)%2==0))"}, {"task_id": 516, "solution": "\ndef radix_sort(nums): \n    radix_sort = [int(nums[i]) for i in range(len(nums))] \n    radix_sort.sort() \n    return radix_sort "}, {"task_id": 714, "solution": "\ndef count_Fac(n): \n    count = 0\n    for i in range(2, int(n**0.5)+1): \n        if n % i == 0:\n            count += 1\n    return count"}, {"task_id": 822, "solution": "\nimport re\r\ndef pass_validity(p): \r\n    return re.search(\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])[A-Za-z\\d@#$%^&+=]{8,}$\", p) is not None"}, {"task_id": 937, "solution": "\nfrom collections import Counter \r\ndef max_char(str1): \r\n    char_count = Counter(str1).most_common(1)[0]\r\n    return char_count[0]"}, {"task_id": 150, "solution": "\ndef does_Contain_B(a,b,c): \n    return ((b - a > c)!= 0)"}, {"task_id": 212, "solution": "\nimport math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1): \r\n        sum += math.pow(i, 4)\r\n    return sum"}, {"task_id": 299, "solution": "\nfrom collections import defaultdict\r\ndef max_aggregate(stdata): \r\n    aggregates = defaultdict(int)\r\n    for tup in stdata:\r\n        aggregates[tup[0]] += tup[1]\r\n    return max(aggregates.items(), key=lambda x: x[1])"}, {"task_id": 365, "solution": "\ndef count_Digit(n): \n    return len(str(n))"}, {"task_id": 437, "solution": "\ndef remove_odd(str1): \n    return \"\".join(str1[1::2]) "}, {"task_id": 443, "solution": "\ndef largest_neg(list1): \n    largest = 0\n    for x in list1: \n        if x<0: \n            largest = x \n    return largest "}, {"task_id": 534, "solution": "\nimport re\r\ndef search_literal(pattern,text): \r\n    pattern = re.compile(pattern)\r\n    match = re.search(pattern,text)\r\n    return match.span()\r"}, {"task_id": 573, "solution": "\ndef unique_product(list_data): \n    unique_values = set(list_data) \n    product = 1\n    for value in unique_values: \n        product *= value \n    return product "}, {"task_id": 633, "solution": "\ndef pair_OR_Sum(arr,n) : \n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum += arr[i] ^ arr[j]\n    return sum"}, {"task_id": 675, "solution": "\ndef sum_nums(x, y,m,n): \n    return x + y if (x > m and y > n) else 20"}, {"task_id": 925, "solution": "\ndef mutiple_tuple(nums): \n    product = 1\n    for x in nums: \n        product *= x\n    return product"}, {"task_id": 26, "solution": "\ndef check_k_elements(test_list, K): \n  for i in test_list:\n    if K not in i:\n      return False\n  return True"}, {"task_id": 79, "solution": "\ndef word_len(s): \n    return len(s)%2"}, {"task_id": 128, "solution": "\ndef long_words(n, str): \n    words = str.split() \n    return [ w for w in words if len(w) > n ] "}, {"task_id": 222, "solution": "\ndef check_type(test_tuple): \n    return all(type(ele) == type(test_tuple[0]) for ele in test_tuple)"}, {"task_id": 296, "solution": "\ndef get_Inv_Count(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"}, {"task_id": 527, "solution": "\ndef get_pairs_count(arr, n, sum): \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"}, {"task_id": 767, "solution": "\ndef get_Pairs_Count(arr,n,sum): \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] + arr[j] == sum: \n                count += 1\n    return count"}, {"task_id": 839, "solution": "\ndef sort_tuple(tup): \n    sorted_tup = sorted(tup, key = lambda x: x[0])\n    return sorted_tup"}, {"task_id": 394, "solution": "\ndef check_distinct(test_tup): \n    return len(set(test_tup)) == len(test_tup)"}, {"task_id": 487, "solution": "\ndef sort_tuple(tup): \n    return sorted(tup, key = lambda x: x[-1]) "}, {"task_id": 681, "solution": "\ndef smallest_Divisor(n): \n    smallest_divisor = 1\n    smallest_divisor = smallest_divisor * 2\n    while smallest_divisor <= n:\n        if n % smallest_divisor == 0:\n            return smallest_divisor\n        smallest_divisor += 1\n    return -1"}, {"task_id": 683, "solution": "\ndef sum_Square(n) : \n    if (n % 2 == 0) :\n        return False \n    else :\n        return True "}, {"task_id": 706, "solution": "\ndef is_subset(arr1, m, arr2, n): \n    return len(set(arr1) & set(arr2)) == n"}, {"task_id": 509, "solution": "\ndef average_Odd(n) : \n    odd = n % 2\n    return odd * n // 2 + odd"}, {"task_id": 22, "solution": "\ndef find_first_duplicate(nums): \n    seen = set()\n    for x in nums:\n        if x in seen:\n            return x\n        else:\n            seen.update([x])\n    return -1"}, {"task_id": 480, "solution": "\ndef get_max_occuring_char(str1): \n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return max(char_count.items(), key=lambda x: x[1])[0]"}, {"task_id": 297, "solution": "\ndef flatten_list(list1): \n    list2 = []\n    for x in list1:\n        if isinstance(x, list):\n            list2.extend(x)\n        else:\n            list2.append(x)\n    return list2"}, {"task_id": 733, "solution": "\ndef find_first_occurrence(A, x):\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i\n\ndef binary_search(arr, x):\n    i = find_first_occurrence(arr, x)\n    if i == 0:\n        return -1\n    return binary_search(arr[:i], x)\n\ndef binary_search_sorted(arr, x):\n    i = binary_search(arr, x)\n    if i == 0:\n        return -1\n    return binary_search_sorted(arr[i:], x)\n\ndef binary_search_sorted_recursive(arr, x):\n    if x == -1:\n        return -1\n    i = binary_search(arr, x)\n    if i == 0:\n        return -1\n    return binary_search_sorted_recursive(arr[i:], x)\n\ndef binary_search_sorted_iterative(arr, x):\n    i = binary_search(arr, x)\n    if i == 0:\n        return -1\n    return binary_search_sorted_iterative(arr[i:], x)\n\ndef binary_search_sorted_iterative_2(arr, x):\n    i = binary_search(arr, x)\n    if i == 0:\n        return -1\n    return binary_search_sorted_iterative(arr[i:], x)\n\ndef binary_search_sorted_iterative_3(arr, x):\n    i = binary_search(arr, x)\n    if i == 0:\n        return -1\n    return binary_search_sorted_iterative_2(arr[i:], x)\n\ndef binary_search_sorted_iterative_4(arr, x):\n    i = binary_search(arr, x)\n    if i == 0:\n        return -1\n    return binary_search_sorted_"}, {"task_id": 54, "solution": "\ndef counting_sort(my_list): \n    counting_list = []\n    for x in my_list:\n        counting_list.append(x)\n    counting_list.sort()\n    return counting_list"}, {"task_id": 3, "solution": "\nimport math\r\ndef is_not_prime(n): \r\n    if n == 2 or n == 3:\r\n        return False\r\n    else:\r\n        return True"}, {"task_id": 225, "solution": "\ndef find_Min(arr,low,high): \n    mid = (low + high) // 2\n    if arr[mid] > arr[high]:\n        low = mid + 1\n    else:\n        high = mid - 1\n    return arr[low]"}, {"task_id": 351, "solution": "\ndef first_Element(arr,n,k): \n    return arr[0] if arr[0] in arr[:k] else first_Element(arr[1:],n,k) "}, {"task_id": 711, "solution": "\ndef product_Equal(n): \n    even = 0\n    odd = 1\n    for i in range(0,n):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even == odd"}]}