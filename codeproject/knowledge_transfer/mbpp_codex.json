{"pass_1": 0.5255555555555558, "pass_k": 0.6022222222222222, "log": [{"task_id": 1, "passed": true, "solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n):\n\r\n    if (n < 0 or m < 0):\r\n        return float('inf')\r\n    elif (m == 0 and n == 0):\r\n        return cost[m][n]\r\n    else:\r\n        return cost[m][n] + min(min_cost(cost, m-1, n-1),\r\n                                min_cost(cost, m-1, n),\r\n                                min_cost(cost, m, n-1))\r\ncost = [[1, 2, 3],\r\n        [4, 8, 2],\r\n        [1, 5, 3]]\r\nprint(min_cost(cost, 2, 2))\r\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 2, "passed": true, "solution": "def similar_elements(test_tup1, test_tup2):\n\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return (res) \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 3, "passed": true, "solution": "import math\r\ndef is_not_prime(n):\n\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:           \r\n            result = True\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 4, "passed": true, "solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\n\r\n    largest_nums = hq.nlargest(n, nums)\r\n    return largest_nums\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 5, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 6, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 7, "passed": true, "solution": "import re\r\ndef find_char_long(text):\n\r\n    result = re.findall(r'\\b\\w{4,}\\b', text)\r\n    return result\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 8, "passed": true, "solution": "def square_nums(nums):\n\n    return list(map(lambda x: x**2, nums))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 9, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 10, "passed": true, "solution": "import heapq\r\ndef small_nnum(list1,n):\n\r\n    return heapq.nsmallest(n,list1)\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 11, "passed": true, "solution": "def remove_Occ(s,ch):\n\n    s = s.replace(ch,\"\")\n    return s\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 12, "passed": true, "solution": "def sort_matrix(M):\n\n    return sorted(M, key=sum)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 13, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 14, "passed": true, "solution": "def find_Volume(l,b,h) :\n\n    return (l*b*h)/2\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 15, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 16, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 17, "passed": true, "solution": "def square_perimeter(a):\n\n    return 4*a\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 18, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 19, "passed": true, "solution": "def test_duplicate(arraynums):\n\n    return len(arraynums) != len(set(arraynums))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 20, "passed": true, "solution": "def is_woodall(x):\n\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3,int(x**0.5)+1,2):\n        if x % i == 0:\n            return False\n    return True\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 21, "passed": true, "solution": "def multiples_of_num(m,n):\n\n    return [i*n for i in range(1,m+1)]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 22, "passed": true, "solution": "def find_first_duplicate(nums):\n\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] == nums[j]:\n                return nums[i]\n    return -1\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 23, "passed": true, "solution": "def maximum_Sum(list1):\n\n    max_sum = 0\n    for i in range(len(list1)):\n        max_sum = max(max_sum, sum(list1[i]))\n    return max_sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 24, "passed": true, "solution": "def binary_to_decimal(binary):\n\n    decimal, i = 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 25, "passed": true, "solution": "def find_Product(arr,n):\n\n    product = 1\n    for i in range(n):\n        if arr[i] not in arr[i+1:]:\n            product *= arr[i]\n    return product\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 26, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 27, "passed": true, "solution": "import re  \r\ndef remove(list):\n\r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list]\r\n    return list\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 28, "passed": true, "solution": "def binomial_Coeff(n,k):\n\n    result = 1\n    for i in range(1,k+1):\n        result = result * (n-i+1) / i\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 29, "passed": true, "solution": "def get_Odd_Occurrence(arr,arr_size):\n\n    for i in range(0,arr_size):\n        count = 0\n        for j in range(0,arr_size):\n            if(arr[i] == arr[j]):\n                count+=1\n        if(count % 2 != 0):\n            return arr[i]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 30, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 31, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 32, "passed": true, "solution": "import math \r\ndef max_Prime_Factors (n):\n \r\n    maxPrime = -1\r\n    while n % 2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n \r\n    return int(maxPrime) \r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 33, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 34, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 35, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 36, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 37, "passed": true, "solution": "def sort_mixed_list(mixed_list):\n\n    mixed_list.sort(key=lambda x: (isinstance(x, str), x))\n    return mixed_list\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 38, "passed": true, "solution": "def div_even_odd(list1):\n\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n            break\n    for i in list1:\n        if i % 2 != 0:\n            odd_num = i\n            break\n    if even_num == 0 or odd_num == 0:\n        return 0\n    else:\n        return even_num / odd_num\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 39, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 40, "passed": true, "solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\n\r\n    return Counter(chain.from_iterable(nums))\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 41, "passed": true, "solution": "def filter_evennumbers(nums):\n\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 42, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 43, "passed": true, "solution": "import re\r\ndef text_match(text):\n\r\n    patterns = '^[a-z]+_[a-z]+$'\r\n    if re.search(patterns,  text):\r\n        return 'Found a match!'\r\n    else:\r\n        return('Not matched!')\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 44, "passed": true, "solution": "import re\r\ndef text_match_string(text):\n\r\n    patterns = '^\\w+'\r\n    if re.search(patterns,  text):\r\n        return 'Found a match!'\r\n    else:\r\n        return('Not matched!')\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 45, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 46, "passed": true, "solution": "def test_distinct(data):\n\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 47, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 48, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 49, "passed": true, "solution": "def specified_element(nums, N):\n\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N])\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 50, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 51, "passed": true, "solution": "def check_equilateral(x,y,z):\n\n    if x == y == z:\n        return True\n    else:\n        return False\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 52, "passed": true, "solution": "def parallelogram_area(b,h):\n\n    area = b * h\n    return area\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 53, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 54, "passed": true, "solution": "def counting_sort(my_list):\n\n    max_value = max(my_list)\n    min_value = min(my_list)\n    size = max_value - min_value + 1\n    count = [0] * size\n    for i in my_list:\n        count[i - min_value] += 1\n    index = 0\n    for i in range(size):\n        for j in range(count[i]):\n            my_list[index] = i + min_value\n            index += 1\n    return my_list\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 55, "passed": true, "solution": "import math\r\ndef tn_gp(a,n,r):\n\r\n    tn = a * (r ** (n - 1))\r\n    return tn\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 56, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 57, "passed": true, "solution": "def find_Max_Num(arr,n) :\n\n    arr.sort(reverse=True)\n    num = 0\n    for i in range(n) :\n        num = num * 10 + arr[i]\n    return num\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 58, "passed": true, "solution": "def opposite_Signs(x,y):\n\n    if x * y < 0:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 59, "passed": true, "solution": "def is_octagonal(n):\n\n    return (n*(3*n-2))\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 60, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 61, "passed": true, "solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\n\r\n    count = 0\r\n    for i in range(n):\r\n        d = defaultdict(int)\r\n        d[0] = 1\r\n        curr_sum = 0\r\n        for j in range(i,n):\r\n            curr_sum += (ord(s[j]) - ord('0'))\r\n            if curr_sum == j - i + 1:\r\n                count += 1\r\n    return count\r\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 62, "passed": true, "solution": "def smallest_num(xs):\n\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 63, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 64, "passed": true, "solution": "def subject_marks(subjectmarks):\n\n    return sorted(subjectmarks, key = lambda x: x[1])\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 65, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 66, "passed": true, "solution": "def pos_count(list):\n\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 67, "passed": true, "solution": "def bell_number(n):\n\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 68, "passed": true, "solution": "def is_Monotonic(A):\n\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 69, "passed": true, "solution": "def is_sublist(l, s):\n\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n\n    return sub_set\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 70, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 71, "passed": true, "solution": "def comb_sort(nums):\n\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i+gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n    return nums\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 72, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 73, "passed": true, "solution": "import re\r\ndef multiple_split(text):\n\r\n    result = re.split('; |, |\\*|\\n', text)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 74, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 75, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 76, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 77, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 78, "passed": true, "solution": "def count_With_Odd_SetBits(n):\n\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 79, "passed": true, "solution": "def word_len(s):\n\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 80, "passed": true, "solution": "def tetrahedral_number(n):\n\n    return int(n * (n + 1) * (n + 2) / 6)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 81, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 82, "passed": true, "solution": "import math\r\ndef volume_sphere(r):\n\r\n    volume = (4/3) * math.pi * r**3\r\n    return volume\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 83, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 84, "passed": true, "solution": "def sequence(n):\n\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 85, "passed": true, "solution": "import math\r\ndef surfacearea_sphere(r):\n\r\n    area = 4 * math.pi * r**2\r\n    return area\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 86, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 87, "passed": true, "solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\r\n    result = ct.ChainMap(dict1,dict2, dict3)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 88, "passed": true, "solution": "import collections\r\ndef freq_count(list1):\n\r\n    freq = collections.Counter(list1)\r\n    return freq\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 89, "passed": true, "solution": "def closest_num(N):\n\n    num = N\n    while True:\n        num -= 1\n        if num < 0:\n            return None\n        if num < N:\n            return num\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 90, "passed": true, "solution": "def len_log(list1):\n\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 91, "passed": true, "solution": "def find_substring(str1, sub_str):\n\n    result = False\n    for i in str1:\n        if sub_str in i:\n            result = True\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 92, "passed": true, "solution": "def is_undulating(n):\n\n    nums = [int(i) for i in str(n)]\n    result = False\n    for i in range(len(nums) - 2):\n        if (nums[i] % 2 == 0 and nums[i+1] % 2 != 0 and nums[i+2] % 2 == 0) or (nums[i] % 2 != 0 and nums[i+1] % 2 == 0 and nums[i+2] % 2 != 0):\n            result = True\n    return result\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 93, "passed": true, "solution": "def power(a,b):\n\n    return a**b\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 94, "passed": true, "solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\n\r\n    return min(test_list, key=itemgetter(1))[0]\r\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 95, "passed": true, "solution": "def Find_Min_Length(lst):\n\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 96, "passed": true, "solution": "def divisor(n):\n\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 97, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 98, "passed": true, "solution": "def multiply_num(numbers):\n\n    result = 1\n    for x in numbers:\n        result *= x\n    return result/len(numbers)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 99, "passed": true, "solution": "def decimal_to_binary(n):\n\n    return bin(n).replace(\"0b\", \"\")\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 100, "passed": true, "solution": "import sys\r\ndef next_smallest_palindrome(num):\n\r\n    num += 1\r\n    while not is_palindrome(num):\r\n        num += 1\r\n    return num\r\ndef is_palindrome(num):\r\n    return str(num) == str(num)[::-1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 101, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 102, "passed": true, "solution": "def snake_to_camel(word):\n\n    import re\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 103, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 104, "passed": true, "solution": "def sort_sublists(input_list):\n\n    return (list(map(lambda x: sorted(x), input_list)))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 105, "passed": true, "solution": "def count(lst):\n\n    return lst.count(True)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 106, "passed": true, "solution": "def add_lists(test_list, test_tup):\n\n    res = test_tup + tuple(test_list)\n    return (res)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 107, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 108, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 109, "passed": true, "solution": "def odd_Equivalent(s,n):\n\n    count = 0\n    for i in range(n):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 110, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 111, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 112, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 113, "passed": true, "solution": "def check_integer(text):\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 114, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 115, "passed": true, "solution": "def empty_dit(list1):\n\n    if all(not d for d in list1):\n        return True\n    else:\n        return False\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 116, "passed": true, "solution": "def tuple_to_int(nums):\n\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 117, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 118, "passed": true, "solution": "def string_to_list(string):\n\n    return string.split()\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 119, "passed": true, "solution": "def search(arr,n) :\n \n    for i in range(0,n) : \n        if (i == 0 and arr[i] != arr[i+1]) or (i == n-1 and arr[i] != arr[i-1]) : \n            return arr[i] \n        if (arr[i] != arr[i+1] and arr[i] != arr[i-1]) : \n            return arr[i] \n    return -1\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 120, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 121, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 122, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 123, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 124, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 125, "passed": true, "solution": "def find_length(string, n):\n\n    max_diff = 0\n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if (zeros - ones) > max_diff:\n                max_diff = zeros - ones\n    return max_diff\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 126, "passed": true, "solution": "def sum(a,b):\n\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 127, "passed": true, "solution": "def multiply_int(x, y):\n\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 128, "passed": true, "solution": "def long_words(n, str):\n\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 129, "passed": true, "solution": "def magic_square_test(my_matrix):\n\n    sum_diagonal_1 = 0\n    sum_diagonal_2 = 0\n    sum_row = 0\n    sum_column = 0\n    for i in range(len(my_matrix)):\n        sum_row = sum_row + my_matrix[i][i]\n        sum_diagonal_1 = sum_diagonal_1 + my_matrix[i][i]\n        sum_diagonal_2 = sum_diagonal_2 + my_matrix[i][len(my_matrix)-i-1]\n        sum_column = sum_column + my_matrix[i][i]\n    if sum_diagonal_1 != sum_diagonal_2 or sum_row != sum_column:\n        return False\n    return True\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 130, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 131, "passed": true, "solution": "def reverse_vowels(str1):\n\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 132, "passed": true, "solution": "def tup_string(tup1):\n\n    str1 = ''.join(tup1)\n    return str1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 133, "passed": true, "solution": "def sum_negativenum(nums):\n\n    return sum(list(filter(lambda x: (x < 0), nums)))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 134, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 135, "passed": true, "solution": "def hexagonal_num(n):\n\n    return n*(2*n-1)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 136, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 137, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 138, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 139, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 140, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 141, "passed": true, "solution": "def pancake_sort(nums):\n\n    for curr_size in range(len(nums),1,-1):\n        max_ind = 0\n        for i in range(0,curr_size):\n            if nums[i] > nums[max_ind]:\n                max_ind = i\n        nums = flip(nums, max_ind)\n        nums = flip(nums, curr_size-1)\n    return nums\ndef flip(nums, k):\n    start = 0\n    while start < k:\n        nums[start], nums[k] = nums[k], nums[start]\n        start += 1\n        k -= 1\n    return nums\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 142, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 143, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 144, "passed": true, "solution": "def sum_Pairs(arr,n):\n\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum += abs(arr[i] - arr[j])\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 145, "passed": true, "solution": "def max_Abs_Diff(arr,n):\n\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 146, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 147, "passed": true, "solution": "def max_path_sum(tri, m, n):\n\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            if tri[i+1][j] > tri[i+1][j+1]:\n                tri[i][j] += tri[i+1][j]\n            else:\n                tri[i][j] += tri[i+1][j+1]\n    return tri[0][0]\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 148, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 149, "passed": true, "solution": "def longest_subseq_with_diff_one(arr, n):\n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 150, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 151, "passed": true, "solution": "def gcd(p,q):\n\n    if q == 0:\n        return p\n    return gcd(q, p % q)\n\ndef is_coprime(x, y):\n    return gcd(x, y) == 1\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 152, "passed": true, "solution": "def merge(a,b):\n\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\n\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 153, "passed": true, "solution": "def parabola_vertex(a, b, c):\n\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x,y)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 154, "passed": true, "solution": "def specified_element(nums, N):\n\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N])\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 155, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 156, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 157, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 158, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 159, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 160, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 161, "passed": true, "solution": "def remove_elements(list1, list2):\n\n    for i in list2:\n        list1.remove(i)\n    return list1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 162, "passed": true, "solution": "def sum_series(n):\n\n    sum = 0\n    for i in range(n,0,-2):\n        sum += i\n    return sum\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 163, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 164, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 165, "passed": true, "solution": "def count_char_position(str1):\n\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(97+i) or str1[i] == chr(65+i):\n            count += 1\n    return count\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 166, "passed": true, "solution": "def find_even_Pair(A,N):\n\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if((A[i]^A[j])%2==0):\n                count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 167, "passed": true, "solution": "def next_Power_Of_2(n):\n\n    count = 0;\n    if (n and not(n & (n - 1))):\n        return n\n    while( n != 0):\n        n >>= 1\n        count += 1\n    return 1 << count;\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 168, "passed": true, "solution": "def frequency(a,x):\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 169, "passed": true, "solution": "def get_pell(n):\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 170, "passed": true, "solution": "def sum_range_list(list1, m, n):\n\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 171, "passed": true, "solution": "import math\r\ndef perimeter_pentagon(a):\n\r\n    perimeter = 5 * a\r\n    return perimeter\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 172, "passed": true, "solution": "def count_occurance(s):\n\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 173, "passed": true, "solution": "import re\r\ndef remove_splchar(text):\n\r\n    result = re.sub('[^A-Za-z0-9]+', '', text)\r\n    return result\r\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 174, "passed": true, "solution": "def group_keyvalue(l):\n\n    d = {}\n    for k,v in l:\n        d.setdefault(k,[]).append(v)\n    return d\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 175, "passed": true, "solution": "def is_valid_parenthese( str1):\n\n    open_tup = tuple('({[')\n    close_tup = tuple(')}]')\n    map = dict(zip(open_tup, close_tup))\n    queue = []\n    for i in str1:\n        if i in open_tup:\n            queue.append(map[i])\n        elif i in close_tup:\n            if not queue or i != queue.pop():\n                return False\n    return not queue\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 176, "passed": true, "solution": "def perimeter_triangle(a,b,c):\n\n    perimeter = a + b + c\n    return perimeter\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 177, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 178, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 179, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 180, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 181, "passed": true, "solution": "def common_prefix_util(str1, str2):\n\n    result = \"\"\n    n1, n2 = len(str1), len(str2)\n    i, j = 0, 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return (result)\ndef common_prefix(arr, n):\n    arr.sort(reverse=True)\n    return common_prefix_util(arr[0], arr[n - 1])\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 182, "passed": true, "solution": "import re\r\ndef find_character(string):\n\r\n    upper_case = re.findall(r'[A-Z]', string)\r\n    lower_case = re.findall(r'[a-z]', string)\r\n    numeric = re.findall(r'[0-9]', string)\r\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\r\n    return (upper_case, lower_case, numeric, special_char)\r\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 183, "passed": true, "solution": "def count_pairs(arr, n, k):\n\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n                count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 184, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 185, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 186, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 187, "passed": true, "solution": "def longest_common_subsequence(X, Y, m, n):\n\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 188, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 189, "passed": true, "solution": "def first_Missing_Positive(arr,n):\n\n    s = set(arr)\n    i = 1\n    while i in s:\n        i += 1\n    return i\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 190, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 191, "passed": true, "solution": "def check_monthnumber(monthname3):\n\n    if monthname3 == 'April' or monthname3 == 'June' or monthname3 == 'September' or monthname3 == 'November':\n        return True\n    else:\n        return False\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 192, "passed": true, "solution": "def check_String(str):\n\n    result = False\n    if any(char.isdigit() for char in str):\n        if any(char.isalpha() for char in str):\n            result = True\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 193, "passed": true, "solution": "def remove_tuple(test_tup):\n\n    res = tuple(set(test_tup))\n    return (res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 194, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 195, "passed": true, "solution": "def first(arr,x,n):\n\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 196, "passed": true, "solution": "def remove_tuples(test_list, K):\n\n    res = [t for t in test_list if len(t) != K]\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 197, "passed": true, "solution": "def find_exponentio(test_tup1, test_tup2):\n\n    res = tuple(pow(x,y) for x,y in zip(test_tup1, test_tup2))\n    return (res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 198, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 199, "passed": true, "solution": "def highest_Power_of_2(n):\n\n    res = 0\n    for i in range(n, 0, -1):\n        if i & (i - 1) == 0:\n            res = i\n            break\n    return res\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 200, "passed": true, "solution": "def position_max(list1):\n\n    max_value = max(list1)\n    return [i for i, j in enumerate(list1) if j == max_value]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 201, "passed": true, "solution": "def chkList(lst):\n\n    return lst[1:] == lst[:-1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 202, "passed": true, "solution": "def remove_even(str1):\n\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result = result + str1[i]\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 203, "passed": true, "solution": "def hamming_Distance(n1,n2) :\n\n    x = n1 ^ n2\n    setBits = 0\n    while (x > 0) :\n        setBits += x & 1\n        x >>= 1\n    return setBits\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 204, "passed": true, "solution": "def count(s,c) :\n\n    count = 0\n    for i in s :\n        if i == c :\n            count = count + 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 205, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 206, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 207, "passed": true, "solution": "def find_longest_repeating_subseq(str):\n\n    n = len(str)\n    dp = [[0 for x in range(n+1)] for x in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (str[i-1] == str[j-1] and i != j):\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[n][n]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 208, "passed": true, "solution": "import re\r\ndef is_decimal(num):\n\r\n    result = re.match(r'^-?\\d+\\.\\d{2}$', num)\r\n    if result:\r\n        return True\r\n    else:\r\n        return False\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 209, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 210, "passed": true, "solution": "import re\r\ndef is_allowed_specific_char(string):\n\r\n    charRe = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = charRe.search(string)\r\n    return not bool(string)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 211, "passed": true, "solution": "def count_Num(n):\n\n    count = 0\n    while n:\n        if n & 1 and n & (1 << (n.bit_length() - 1)):\n            count += 1\n        n >>= 1\n    return count\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 212, "passed": true, "solution": "import math  \r\ndef fourth_Power_Sum(n):\n\n    sum = 0\n    for i in range(1,n+1):\n        sum += math.pow(i,4)\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 213, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 214, "passed": true, "solution": "import math\r\ndef degree_radian(radian):\n\r\n    degree = radian * (180 / math.pi)\r\n    return degree\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 215, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 216, "passed": true, "solution": "def check_subset_list(list1, list2):\n\n    result = False\n    for i in list1:\n        if i in list2:\n            result = True\n        else:\n            result = False\n    return result\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 217, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 218, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 219, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 220, "passed": true, "solution": "import re\r\ndef replace_max_specialchar(text,n):\n\r\n    result = re.sub(r'[, .]', ':', text, n)\r\n    return result\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 221, "passed": true, "solution": "def first_even(nums):\n\n    for i in nums:\n        if i % 2 == 0:\n            return i\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 222, "passed": true, "solution": "def check_type(test_tuple):\n\n    result = all(type(x) == type(test_tuple[0]) for x in test_tuple)\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 223, "passed": true, "solution": "def is_majority(arr, n, x):\n\n    if arr.count(x) > n//2:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 224, "passed": true, "solution": "def count_Set_Bits(n):\n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 225, "passed": true, "solution": "def find_Min(arr,low,high):\n\n    if(high < low):\n        return arr[0]\n    if(high == low):\n        return arr[low]\n    mid = int((low + high)/2)\n    if(mid < high and arr[mid+1] < arr[mid]):\n        return arr[mid+1]\n    if(mid > low and arr[mid] < arr[mid - 1]):\n        return arr[mid]\n    if(arr[high] > arr[mid]):\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 226, "passed": true, "solution": "def odd_values_string(str):\n\n    result = \"\" \n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 227, "passed": true, "solution": "def min_of_three(a,b,c):\n\n    return min(a,b,c)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 228, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 229, "passed": true, "solution": "def re_arrange_array(arr, n):\n\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 230, "passed": true, "solution": "def replace_blank(str1,char):\n\n    str1 = str1.replace(\" \",char)\n    return str1\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 231, "passed": true, "solution": "def max_sum(tri, n):\n\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            tri[i-1][j] += max(tri[i][j], tri[i][j+1])\n    return tri[0][0]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 232, "passed": true, "solution": "import heapq\r\ndef larg_nnum(list1,n):\n\r\n    return heapq.nlargest(n,list1)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 233, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 234, "passed": true, "solution": "def volume_cube(l):\n\n    return l**3\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 235, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 236, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 237, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 238, "passed": true, "solution": "def number_of_substrings(str):\n\n    str_len = len(str);\n    return int(str_len * (str_len + 1) / 2);\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 239, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 240, "passed": true, "solution": "def replace_list(list1,list2):\n\n    list1[-1:] = list2\n    return list1\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 241, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 242, "passed": true, "solution": "def count_charac(str1):\n\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 243, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 244, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 245, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 246, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 247, "passed": true, "solution": "def lps(str):\n\n    n = len(str)\n    L = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j]);\n    return L[0][n-1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 248, "passed": true, "solution": "def harmonic_sum(n):\n\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 249, "passed": true, "solution": "def intersection_array(array_nums1,array_nums2):\n\n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 250, "passed": true, "solution": "def count_X(tup, x):\n\n    return tup.count(x)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 251, "passed": true, "solution": "def insert_element(list,element):\n\n    result = []\n    for i in list:\n        result.append(element)\n        result.append(i)\n    return result\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 252, "passed": true, "solution": "import cmath  \r\ndef convert(numbers):\n\r\n    return cmath.polar(numbers)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 253, "passed": true, "solution": "def count_integer(list1):\n\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 254, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 255, "passed": true, "solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\n \r\n    return list(combinations_with_replacement(l, n)) \r\nl = ['red', 'green', 'blue'] \r\nn = 2\r\nprint(combinations_colors(l, n))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 256, "passed": true, "solution": "def count_Primes_nums(n):\n\n    count = 0\n    for num in range(2,n):\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                count += 1\n    return count\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 257, "passed": true, "solution": "def swap_numbers(a,b):\n\n    a,b = b,a\n    return a,b\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 258, "passed": true, "solution": "def count_odd(array_nums):\n\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 259, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 260, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 261, "passed": true, "solution": "def division_elements(test_tup1, test_tup2):\n\n    res = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n    return (res)\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 262, "passed": true, "solution": "def split_two_parts(list1, L):\n\n    return (list1[:L], list1[L:])\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 263, "passed": true, "solution": "def merge_dict(d1,d2):\n\n    d1.update(d2)\n    return d1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 264, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 265, "passed": true, "solution": "def list_split(S, step):\n\n    return [S[i::step] for i in range(step)]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 266, "passed": true, "solution": "def lateralsurface_cube(l):\n\n    return 4 * l * l\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 267, "passed": true, "solution": "def square_Sum(n):\n\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 268, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 269, "passed": true, "solution": "def ascii_value(k):\n\n    return ord(k)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 270, "passed": true, "solution": "def sum_even_and_even_index(arr,n):\n\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 271, "passed": true, "solution": "def even_Power_Sum(n):\n\n    sum = 0\n    for i in range(2,n*2+1,2):\n        sum += i**5\n    return sum\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 272, "passed": true, "solution": "def rear_extract(test_list):\n\n    res = []\n    for i in test_list:\n        res.append(i[-1])\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 273, "passed": true, "solution": "def substract_elements(test_tup1, test_tup2):\n\n    res = tuple(map(lambda x,y:x-y,test_tup1,test_tup2))\n    return (res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 274, "passed": true, "solution": "import math  \r\ndef even_binomial_Coeff_Sum( n):\n \r\n    sum = 0\r\n    for i in range(0, n + 1): \r\n        if i % 2 == 0: \r\n            sum += math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) \r\n    return sum \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 275, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 276, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 277, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 278, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 279, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 280, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 281, "passed": true, "solution": "def all_unique(test_list):\n\n    return len(test_list) == len(set(test_list))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 282, "passed": true, "solution": "def sub_list(nums1,nums2):\n\n    res = list(map(lambda x,y: x-y, nums1, nums2))\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 283, "passed": true, "solution": "def validate(n):\n\n    for i in str(n):\n        if str(n).count(i) > int(i):\n            return False\n    return True\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 284, "passed": true, "solution": "def check_element(list,element):\n\n    return all(x == element for x in list)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 285, "passed": true, "solution": "import re\r\ndef text_match_two_three(text):\n\r\n    patterns = 'ab{2,3}?'\r\n    if re.search(patterns,  text):\r\n        return 'Found a match!'\r\n    else:\r\n        return('Not matched!')\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 286, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 287, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 288, "passed": true, "solution": "def modular_inverse(arr, N, P):\n\n    count = 0\n    for i in range(N):\n        if (arr[i] * arr[i]) % P == 1:\n            count += 1\n    return count\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 289, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 290, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 291, "passed": true, "solution": "def count_no_of_ways(n, k):\n\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 292, "passed": true, "solution": "def find(n,m):\n\n    return n//m\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 293, "passed": true, "solution": "import math\r\ndef otherside_rightangle(w,h):\n\r\n    return math.sqrt(w**2 + h**2)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 294, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 295, "passed": true, "solution": "def sum_div(number):\n\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 296, "passed": true, "solution": "def get_Inv_Count(arr,n):\n\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 297, "passed": true, "solution": "def flatten_list(list1):\n\n    result = []\n    for i in list1:\n        if type(i) == list:\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 298, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 299, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 300, "passed": true, "solution": "def count_binary_seq(n):\n\n    count = 0\n    for i in range(0, 2**n):\n        for j in range(0, 2**n):\n            if bin(i).count(\"1\") == bin(j).count(\"1\"):\n                count += 1\n    return count\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 301, "passed": true, "solution": "def dict_depth(d):\n\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 302, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 303, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 304, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 305, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 306, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 307, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 308, "passed": true, "solution": "def large_product(nums1, nums2, N):\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    result = []\n    for i in range(N):\n        for j in range(N):\n            result.append(nums1[i] * nums2[j])\n    result.sort(reverse=True)\n    return result[:N]\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 309, "passed": true, "solution": "def maximum(a,b):\n\n    if a > b:\n        return a\n    else:\n        return b\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 310, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 311, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 312, "passed": true, "solution": "import math\r\ndef volume_cone(r,h):\n\r\n    volume = (1/3) * math.pi * r * r * h\r\n    return volume\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 313, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 314, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 315, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 316, "passed": true, "solution": "def find_last_occurrence(A, x):\n\n    for i in range(len(A)-1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 317, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 318, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 319, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 320, "passed": true, "solution": "def sum_difference(n):\n\n    sum_of_squares = 0\n    square_of_sum = 0\n    for i in range(1,n+1):\n        sum_of_squares += i**2\n        square_of_sum += i\n    square_of_sum = square_of_sum**2\n    difference = square_of_sum - sum_of_squares\n    return difference\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 321, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 322, "passed": true, "solution": "def position_min(list1):\n\n    min_pos = []\n    for i in range(len(list1)):\n        if list1[i] == min(list1):\n            min_pos.append(i)\n    return min_pos\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 323, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 324, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 325, "passed": true, "solution": "def get_Min_Squares(n):\n\n    if n <= 3:\n        return n\n    res = n\n    for i in range(1,n+1):\n        temp = i * i\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 326, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 327, "passed": true, "solution": "def check_isosceles(x,y,z):\n\n    if x == y or y == z or x == z:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 328, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 329, "passed": true, "solution": "def neg_count(list):\n\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 330, "passed": true, "solution": "import re\r\ndef find_char(text):\n\r\n    result = re.findall(r'\\b\\w{3,5}\\b', text)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 331, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 332, "passed": true, "solution": "def char_frequency(str1):\n\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 333, "passed": true, "solution": "def Sort(sub_li):\n \n    l = len(sub_li) \n    for i in range(0, l): \n        for j in range(0, l-i-1): \n            if (sub_li[j][1] > sub_li[j + 1][1]): \n                tempo = sub_li[j] \n                sub_li[j]= sub_li[j + 1] \n                sub_li[j + 1]= tempo \n    return sub_li \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 334, "passed": true, "solution": "def check_Validity(a,b,c):\n\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) :\n        return False\n    else:\n        return True\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 335, "passed": true, "solution": "def ap_sum(a,n,d):\n\n    return (n/2)*(2*a+(n-1)*d)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 336, "passed": true, "solution": "def check_monthnum(monthname1):\n\n    month_name = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    month_num = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month_dict = dict(zip(month_name, month_num))\n    if month_dict[monthname1] == 28:\n        return True\n    else:\n        return False\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 337, "passed": true, "solution": "import re\r\ndef text_match_word(text):\n\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 338, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 339, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 340, "passed": true, "solution": "def sum_three_smallest_nums(lst):\n\n    lst = [x for x in lst if x > 0]\n    return sum(sorted(lst)[:3])\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 341, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 342, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 343, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 344, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 345, "passed": true, "solution": "def diff_consecutivenums(nums):\n\n    diff_nums = [nums[i] - nums[i-1] for i in range(1, len(nums))]\n    return diff_nums\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 346, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 347, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 348, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 349, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 350, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 351, "passed": true, "solution": "def first_Element(arr,n,k):\n\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[i] == arr[j]:\n                count += 1\n        if count == k:\n            return arr[i]\n    return -1\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 352, "passed": true, "solution": "def unique_Characters(str):\n\n    return len(str) == len(set(str))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 353, "passed": true, "solution": "def remove_column(list1, n):\n\n    for i in range(len(list1)):\n        del list1[i][n]\n    return list1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 354, "passed": true, "solution": "def tn_ap(a,n,d):\n\n    tn = a + (n - 1) * d\n    return tn\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 355, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 356, "passed": true, "solution": "def find_angle(a,b):\n\n    c = 180 - (a + b)\n    return (c)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 357, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 358, "passed": true, "solution": "def moddiv_list(nums1,nums2):\n\n    result = list(map(lambda x,y: x % y, nums1,nums2))\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 359, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 360, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 361, "passed": true, "solution": "def remove_empty(list1):\n\n    list1 = [x for x in list1 if x]\n    return list1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 362, "passed": true, "solution": "def max_occurrences(nums):\n\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_num = max(nums_dict, key=nums_dict.get)\n    return max_num\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 363, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 364, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 365, "passed": true, "solution": "def count_Digit(n):\n\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 366, "passed": true, "solution": "def adjacent_num_product(list_nums):\n\n    max_product = 0\n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 367, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 368, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 369, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 370, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 371, "passed": true, "solution": "def smallest_missing(A, left_element, right_element):\n\n    if left_element > right_element:\n        return right_element + 1\n    if left_element != A[left_element]:\n        return left_element\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] > mid_element:\n        return smallest_missing(A, left_element, mid_element)\n    return smallest_missing(A, mid_element+1, right_element)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 372, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 373, "passed": true, "solution": "def volume_cuboid(l,w,h):\n\n    return l*w*h\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 374, "passed": true, "solution": "def permute_string(str):\n\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 375, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 376, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 377, "passed": true, "solution": "def remove_Char(s,c) :\n\n    return s.replace(c,'')\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 378, "passed": true, "solution": "def move_first(test_list):\n\n    test_list.insert(0, test_list.pop())\n    return test_list\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 379, "passed": true, "solution": "def surfacearea_cuboid(l,w,h):\n\n    return 2*(l*w + w*h + h*l)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 380, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 381, "passed": true, "solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\n\r\n    return sorted(list_data, key=itemgetter(index_no))\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 382, "passed": true, "solution": "def find_rotation_count(A):\n\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[high]:\n            high = mid - 1\n        elif A[mid] >= A[low]:\n            low = mid + 1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 383, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 384, "passed": true, "solution": "def frequency_Of_Smallest(n,arr):\n\n    return arr.count(min(arr))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 385, "passed": true, "solution": "def get_perrin(n):\n\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 386, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 387, "passed": true, "solution": "def even_or_odd(N):\n\n    if int(N,16) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 388, "passed": true, "solution": "def highest_Power_of_2(n):\n\n    i = 0\n    while True:\n        if 2**i <= n:\n            i += 1\n        else:\n            return 2**(i-1)\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 389, "passed": true, "solution": "def find_lucas(n):\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 390, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 391, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 392, "passed": true, "solution": "def get_max_sum (n):\n\n    if n == 0:\n        return 0\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 393, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 394, "passed": true, "solution": "def check_distinct(test_tup):\n\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 395, "passed": true, "solution": "def first_non_repeating_character(str1):\n\n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1\n            char_order.append(c)\n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 396, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 397, "passed": true, "solution": "def median_numbers(a,b,c):\n\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if a > c:\n            median = a\n        elif b < c:\n            median = b\n        else:\n            median = c\n    return median\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 398, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 399, "passed": true, "solution": "def bitwise_xor(test_tup1, test_tup2):\n\n    res = tuple(a ^ b for a,b in zip(test_tup1, test_tup2))\n    return (res)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 400, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 401, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 402, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 403, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 404, "passed": true, "solution": "def minimum(a,b):\n\n    if a < b:\n        return a\n    else:\n        return b\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 405, "passed": true, "solution": "def check_tuplex(tuplex,tuple1):\n\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 406, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 407, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 408, "passed": true, "solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\n\r\n    if len(nums1) == 0 or len(nums2) == 0:\r\n        return []\r\n    heap = []\r\n    for i in range(min(k, len(nums1))):\r\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\r\n    result = []\r\n    while heap and len(result) < k:\r\n        _, i, j = heapq.heappop(heap)\r\n        result.append([nums1[i], nums2[j]])\r\n        if j + 1 < len(nums2):\r\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\r\n    return result\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 409, "passed": true, "solution": "def min_product_tuple(list1):\n\n    min_prod = list1[0][0] * list1[0][1]\n    for i in range(1,len(list1)):\n        prod = list1[i][0] * list1[i][1]\n        if prod < min_prod:\n            min_prod = prod\n    return min_prod\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 410, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 411, "passed": true, "solution": "import re\r\ndef snake_to_camel(word):\n\r\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 412, "passed": true, "solution": "def remove_odd(l):\n\n    return [x for x in l if x % 2 == 0]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 413, "passed": true, "solution": "def extract_nth_element(list1, n):\n\n    return [tup[n] for tup in list1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 414, "passed": true, "solution": "def overlapping(list1,list2):\n\n    result = False\n    for i in list1:\n        for j in list2:\n            if i == j:\n                result = True\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 415, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 416, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 417, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 418, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 419, "passed": true, "solution": "def round_and_sum(list1):\n\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    return sum * len(list1)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 420, "passed": true, "solution": "def cube_Sum(n):\n\n    sum = 0\n    for i in range(2,n*2+1,2):\n        sum += i**3\n    return sum\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 421, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 422, "passed": true, "solution": "def find_Average_Of_Cube(n):\n\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 423, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 424, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 425, "passed": true, "solution": "def count_element_in_list(list1, x):\n\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 426, "passed": true, "solution": "def filter_oddnumbers(nums):\n\n    odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n    return odd_nums\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 427, "passed": true, "solution": "import re\r\ndef change_date_format(dt):\n\r\n    result = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 428, "passed": true, "solution": "def shell_sort(my_list):\n\n    sublistcount = len(my_list)//2\n    while sublistcount > 0:\n        for start in range(sublistcount):\n            gap_insertion_sort(my_list,start,sublistcount)\n        sublistcount = sublistcount // 2\n    return my_list\ndef gap_insertion_sort(my_list,start,gap):\n    for i in range(start+gap,len(my_list),gap):\n        currentvalue = my_list[i]\n        position = i\n        while position>=gap and my_list[position-gap]>currentvalue:\n            my_list[position]=my_list[position-gap]\n            position = position-gap\n        my_list[position]=currentvalue\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 429, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 430, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 431, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 432, "passed": true, "solution": "def median_trapezium(base1,base2,height):\n\n    median = (base1 + base2) / 2\n    return median\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 433, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 434, "passed": true, "solution": "import re\r\ndef text_match_one(text):\n\r\n    patterns = 'ab+?'\r\n    if re.search(patterns,  text):\r\n        return 'Found a match!'\r\n    else:\r\n        return('Not matched!')\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 435, "passed": true, "solution": "def last_Digit(n) :\n\n    return n % 10\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 436, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 437, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 438, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 439, "passed": true, "solution": "def multiple_to_single(L):\n\n    return int(\"\".join(map(str, L)))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 440, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 441, "passed": true, "solution": "def surfacearea_cube(l):\n\n    return 6 * l * l\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 442, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 443, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 444, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 445, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 446, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 447, "passed": true, "solution": "def cube_nums(nums):\n\n    return list(map(lambda x: x**3, nums))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 448, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 449, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 450, "passed": true, "solution": "def extract_string(str, l):\n\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            result.append(str[i])\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 451, "passed": true, "solution": "import re\r\ndef remove_whitespaces(text1):\n\r\n    result = re.sub(r'\\s+', '', text1)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 452, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 453, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 454, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 455, "passed": true, "solution": "def check_monthnumb_number(monthnum2):\n\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 456, "passed": true, "solution": "def reverse_string_list(stringlist):\n\n    return [x[::-1] for x in stringlist]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 457, "passed": true, "solution": "def Find_Min(lst):\n\n    min_len = len(lst[0])\n    min_list = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_list = i\n    return min_list\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 458, "passed": true, "solution": "def rectangle_area(l,b):\n\n    area = l * b\n    return area\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 459, "passed": true, "solution": "import re\r\ndef remove_uppercase(str1):\n\r\n    res = re.sub('[A-Z]+', '', str1)\r\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 460, "passed": true, "solution": "def Extract(lst):\n \n    return [item[0] for item in lst] \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 461, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 462, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 463, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 464, "passed": true, "solution": "def check_value(dict, n):\n\n    result = True\n    for i in dict.values():\n        if i != n:\n            result = False\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 465, "passed": true, "solution": "def drop_empty(dict1):\n\n    dict1 = {k:v for k,v in dict1.items() if v}\n    return dict1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 466, "passed": true, "solution": "def find_peak_util(arr, low, high, n):\n\n    mid = low + (high - low)/2\n    mid = int(mid)\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n - 1, n)\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 467, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 468, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 469, "passed": true, "solution": "def max_profit(price, k):\n\n    if k >= len(price) // 2:\n        return sum(x - y for x, y in zip(price[1:], price[:-1]) if x > y)\n    profit = [[0 for _ in range(len(price))] for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, len(price)):\n            profit[i][j] = max(profit[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, profit[i - 1][j] - price[j])\n    return profit[k][len(price) - 1]\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 470, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 471, "passed": true, "solution": "def find_remainder(arr, lens, n):\n\n    mul = 1\n    for i in range(lens):\n        mul = (mul * (arr[i] % n)) % n\n    return mul % n\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 472, "passed": true, "solution": "def check_Consecutive(l):\n\n    return sorted(l) == list(range(min(l), max(l)+1))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 473, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 474, "passed": true, "solution": "def replace_char(str1,ch,newch):\n\n    str1 = str1.replace(ch,newch)\n    return str1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 475, "passed": true, "solution": "from collections import Counter\r\ndef sort_counter(dict1):\n\r\n    sorted_dict = Counter(dict1)\r\n    return sorted_dict.most_common()\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 476, "passed": true, "solution": "def big_sum(nums):\n\n    return max(nums) + min(nums)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 477, "passed": true, "solution": "def is_lower(string):\n\n    return string.lower()\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 478, "passed": true, "solution": "import re\r\ndef remove_lowercase(str1):\n\r\n    result = re.sub('[a-z]', '', str1)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 479, "passed": true, "solution": "def first_Digit(n) :\n\n    while n >= 10:\n        n = n / 10;\n    return int(n)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 480, "passed": true, "solution": "def get_max_occuring_char(str1):\n\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return max(dict, key=dict.get)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 481, "passed": true, "solution": "def is_subset_sum(set, n, sum):\n\n    subset =([[False for i in range(sum + 1)] for i in range(n + 1)])\n    for i in range(n + 1):\n        subset[i][0] = True\n    for i in range(1, sum + 1):\n        subset[0][i]= False\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j<set[i-1]:\n                subset[i][j] = subset[i-1][j]\n            if j>=set[i-1]:\n                subset[i][j] = (subset[i-1][j] or subset[i - 1][j-set[i-1]])\n    return subset[n][sum]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 482, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 483, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 484, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 485, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 486, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 487, "passed": true, "solution": "def sort_tuple(tup):\n\n    return sorted(tup, key=lambda x: x[-1])\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 488, "passed": true, "solution": "import math\r\ndef area_pentagon(a):\n\r\n    area = (5 * a**2) / (4 * math.tan(math.pi / 5))\r\n    return area\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 489, "passed": true, "solution": "def frequency_Of_Largest(n,arr):\n\n    arr.sort()\n    return arr.count(arr[n-1])\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 490, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 491, "passed": true, "solution": "import math\r\ndef sum_gp(a,n,r):\n\r\n    sum = a * (1 - math.pow(r,n)) / (1 - r)\r\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 492, "passed": true, "solution": "def binary_search(item_list,item):\n\n    first = 0\n    last = len(item_list)-1\n    found = False\n    while( first<=last and not found):\n        mid = (first + last)//2\n        if item_list[mid] == item :\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 493, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 494, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 495, "passed": true, "solution": "import re\r\ndef remove_lowercase(str1):\n\r\n    result = re.sub('[a-z]', '', str1)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 496, "passed": true, "solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\n\r\n    smallest_nums = hq.nsmallest(n, nums)\r\n    return smallest_nums\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 497, "passed": true, "solution": "import math\r\ndef surfacearea_cone(r,h):\n\r\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 498, "passed": true, "solution": "def gcd(x, y):\n\n    gcd = 1\n    \n    if x % y == 0:\n        return y\n    \n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 499, "passed": true, "solution": "def diameter_circle(r):\n\n    d = 2 * r\n    return d\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 500, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 501, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 502, "passed": true, "solution": "def find(n,m):\n\n    return n % m\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 503, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 504, "passed": true, "solution": "def sum_Of_Series(n):\n\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 505, "passed": true, "solution": "def re_order(A):\n\n    for i in range(len(A)):\n        if A[i] == 0:\n            A.append(A.pop(i))\n    return A\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 506, "passed": true, "solution": "def permutation_coefficient(n, k):\n\n    if k == 0:\n        return 1\n    else:\n        return (n * permutation_coefficient(n - 1, k - 1))\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 507, "passed": true, "solution": "def remove_words(list1, removewords):\n\n    for word in removewords:\n        list1 = [x for x in list1 if x != word]\n    return list1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 508, "passed": true, "solution": "def same_order(l1, l2):\n\n    if len(l1) == 0 or len(l2) == 0:\n        return True\n    else:\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                if l1[i] == l2[i]:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 509, "passed": true, "solution": "def average_Odd(n) :\n\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2) :\n        sum = sum + i\n        count = count + 1\n    return sum/count\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 510, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 511, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 512, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 513, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 514, "passed": true, "solution": "def sum_elements(test_tup):\n\n    res = sum(test_tup)\n    return (res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 515, "passed": true, "solution": "def modular_sum(arr, n, m):\n\n    if n > m:\n        return True\n    dp = [[False for i in range(m)] for j in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, m):\n            dp[i][j] = dp[i - 1][j]\n            if arr[i - 1] <= j:\n                dp[i][j] |= dp[i - 1][j - arr[i - 1]]\n    return dp[n][m - 1]\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 516, "passed": true, "solution": "def radix_sort(nums):\n\n    RADIX = 10\n    maxLength = False\n    tmp , placement = -1, 1\n    while not maxLength:\n        maxLength = True\n        buckets = [list() for _ in range( RADIX )]\n        for  i in nums:\n            tmp = i / placement\n            buckets[int(tmp % RADIX)].append(i)\n            if maxLength and tmp > 0:\n                maxLength = False\n        a = 0\n        for b in range( RADIX ):\n            buck = buckets[b]\n            for i in buck:\n                nums[a] = i\n                a += 1\n        placement *= RADIX\n    return nums\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 517, "passed": true, "solution": "def largest_pos(list1):\n\n    list1 = [x for x in list1 if x > 0]\n    return max(list1)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 518, "passed": true, "solution": "import math\r\ndef sqrt_root(num):\n\r\n    if math.sqrt(num).is_integer():\r\n        return math.sqrt(num)\r\n    else:\r\n        return \"Not a perfect square\"\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 519, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 520, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 521, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 522, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 523, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 524, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 525, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 526, "passed": true, "solution": "def capitalize_first_last_letters(str1):\n\n    str1 = result = str1.title()\n    result =  \"\"\n    for word in str1.split():\n        result += word[:-1] + word[-1].upper() + \" \"\n    return result[:-1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 527, "passed": true, "solution": "def get_pairs_count(arr, n, sum):\n\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 528, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 529, "passed": true, "solution": "def jacobsthal_lucas(n):\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_lucas(n-1) + 2*jacobsthal_lucas(n-2)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 530, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 531, "passed": true, "solution": "import sys \r\ndef min_coins(coins, m, V):\n \r\n    table = [0 for i in range(V + 1)] \r\n    table[0] = 0\r\n    for i in range(1, V + 1): \r\n        table[i] = sys.maxsize \r\n    for i in range(1, V + 1): \r\n        for j in range(m): \r\n            if (coins[j] <= i): \r\n                sub_res = table[i - coins[j]] \r\n                if (sub_res != sys.maxsize and sub_res + 1 < table[i]): \r\n                    table[i] = sub_res + 1\r\n    return table[V] \r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 532, "passed": true, "solution": "def check_permutation(str1, str2):\n\n    if len(str1) != len(str2):\n        return False\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 533, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 534, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 535, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 536, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 537, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 538, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 539, "passed": true, "solution": "def basesnum_coresspondingnum(bases_num,index):\n\n    result = list(map(lambda x,y: x**y, bases_num, index))\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 540, "passed": true, "solution": "def find_Diff(arr,n):\n\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    return max_freq - min_freq\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 541, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 542, "passed": true, "solution": "import re\r\ndef fill_spaces(text):\n\r\n    result = re.sub(r'[ ,.]', ':', text)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 543, "passed": true, "solution": "def count_digits(num1,num2):\n\n    sum = num1 + num2\n    count = 0\n    while sum > 0:\n        sum = sum // 10\n        count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 544, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 545, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 546, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 547, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 548, "passed": true, "solution": "def longest_increasing_subsequence(arr):\n\n    n = len(arr)\n    lis = [1]*n\n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 :\n                lis[i] = lis[j]+1\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum , lis[i])\n    return maximum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 549, "passed": true, "solution": "def odd_Num_Sum(n) :\n \n    sum = 0\n    for i in range(1, n*2, 2) : \n        sum = sum + (i * i * i * i * i) \n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 550, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 551, "passed": true, "solution": "def extract_column(list1, n):\n\n    return [item[n] for item in list1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 552, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 553, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 554, "passed": true, "solution": "def Split(list):\n\n    odd = []\n    even = []\n    for i in list:\n        if i % 2:\n            odd.append(i)\n        else:\n            even.append(i)\n    return odd\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 555, "passed": true, "solution": "def difference(n) :\n\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    return (sum_of_cubes - sum_of_nums)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 556, "passed": true, "solution": "def find_Odd_Pair(A,N) :\n\n    count = 0\n    for i in range(0, N) :\n        for j in range(i + 1, N) :\n            if((A[i] ^ A[j]) & 1) :\n                count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 557, "passed": true, "solution": "def toggle_string(string):\n\n    string = string.swapcase()\n    return string\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 558, "passed": true, "solution": "def digit_distance_nums(n1, n2):\n\n    n1 = str(n1)\n    n2 = str(n2)\n    n1_len = len(n1)\n    n2_len = len(n2)\n    if n1_len > n2_len:\n        n2 = n2.zfill(n1_len)\n    elif n2_len > n1_len:\n        n1 = n1.zfill(n2_len)\n    distance = 0\n    for i in range(len(n1)):\n        distance += abs(int(n1[i]) - int(n2[i]))\n    return distance\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 559, "passed": true, "solution": "def max_sub_array_sum(a, size):\n\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 560, "passed": true, "solution": "def union_elements(test_tup1, test_tup2):\n\n    res = tuple(set(test_tup1) | set(test_tup2))\n    return (res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 561, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 562, "passed": true, "solution": "def Find_Max_Length(lst):\n\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 563, "passed": true, "solution": "import re\r\ndef extract_values(text):\n\r\n    values = re.findall(r'\\\"(.+?)\\\"', text)\r\n    return values\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 564, "passed": true, "solution": "def count_Pairs(arr,n):\n\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 565, "passed": true, "solution": "def split(word):\n \n    return [char for char in word]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 566, "passed": true, "solution": "def sum_digits(n):\n\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 567, "passed": true, "solution": "def issort_list(list1):\n\n    return list1 == sorted(list1)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 568, "passed": true, "solution": "def empty_list(length):\n\n    return [{} for _ in range(length)]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 569, "passed": true, "solution": "def sort_sublists(list1):\n\n    return [sorted(sublist) for sublist in list1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 570, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 571, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 572, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 573, "passed": true, "solution": "def unique_product(list_data):\n\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    result = 1\n    for i in unique_list:\n        result = result * i\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 574, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 575, "passed": true, "solution": "def count_no (A,N,L,R):\n\n    count = 0\n    for i in range(L,R+1):\n        if i % A != 0:\n            count += 1\n        if count == N:\n            return i\n    return -1\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 576, "passed": true, "solution": "def is_Sub_Array(A,B,n,m):\n\n    result = False\n    for i in range(n):\n        j = 0\n        while j < m and i+j < n and A[i+j] == B[j]:\n            j += 1\n        if j == m:\n            result = True\n    return result\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 577, "passed": true, "solution": "def last_Digit_Factorial(n):\n\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 578, "passed": true, "solution": "def interleave_lists(list1,list2,list3):\n\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 579, "passed": true, "solution": "def find_dissimilar(test_tup1, test_tup2):\n\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return (res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 580, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 581, "passed": true, "solution": "def surface_Area(b,s):\n\n    area = (b*b) + (2*b*s)\n    return area\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 582, "passed": true, "solution": "def my_dict(dict1):\n\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 583, "passed": true, "solution": "def catalan_number(num):\n\n    if num <=1 :\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num-i-1)\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 584, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 585, "passed": true, "solution": "import heapq\r\ndef expensive_items(items,n):\n\r\n    expensive_items = heapq.nlargest(n, items, key=lambda x: x['price'])\r\n    return expensive_items\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 586, "passed": true, "solution": "def split_Arr(a,n,k):\n\n    for i in range(k):\n        x = a[0]\n        for j in range(n-1):\n            a[j] = a[j + 1]\n        a[n-1] = x\n    return a\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 587, "passed": true, "solution": "def list_tuple(listx):\n\n    return tuple(listx)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 588, "passed": true, "solution": "def big_diff(nums):\n\n    return max(nums) - min(nums)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 589, "passed": true, "solution": "def perfect_squares(a, b):\n\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 590, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 591, "passed": true, "solution": "def swap_List(newList):\n\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 592, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 593, "passed": true, "solution": "import re\r\ndef removezero_ip(ip):\n\r\n    return re.sub(r'(?<=\\.)0*(\\d+)', r'\\1', ip)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 594, "passed": true, "solution": "def diff_even_odd(list1):\n\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n            break\n    for i in list1:\n        if i % 2 != 0:\n            odd_num = i\n            break\n    return even_num - odd_num\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 595, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 596, "passed": true, "solution": "import sys \r\ndef tuple_size(tuple_list):\n\r\n    size = sys.getsizeof(tuple_list)\r\n    return size\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 597, "passed": true, "solution": "def find_kth(arr1, arr2, m, n, k):\n\n    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k//2)\n    j = min(n, k//2)\n    if arr1[i-1] > arr2[j-1]:\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\n    else:\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 598, "passed": true, "solution": "def armstrong_number(number):\n\n    num_len = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** num_len\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 599, "passed": true, "solution": "def sum_average(number):\n\n    sum_num = (number * (number + 1)) / 2\n    avg = sum_num / number\n    return sum_num, avg\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 600, "passed": true, "solution": "def is_Even(n) :\n\n    if (n & 1) == 0:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 601, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 602, "passed": true, "solution": "def first_repeated_char(str1):\n\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return 'None'\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 603, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 604, "passed": true, "solution": "def reverse_words(s):\n\n    return ' '.join(reversed(s.split()))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 605, "passed": true, "solution": "def prime_num(num):\n\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 606, "passed": true, "solution": "import math\r\ndef radian_degree(degree):\n\r\n    radian = degree * (math.pi/180)\r\n    return radian\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 607, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 608, "passed": true, "solution": "def bell_Number(n):\n\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 609, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 610, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 611, "passed": true, "solution": "def max_of_nth(test_list, N):\n\n    max_nth = max(test_list, key=lambda x: x[N])\n    return max_nth[N]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 612, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 613, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 614, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 615, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 616, "passed": true, "solution": "def tuple_modulo(test_tup1, test_tup2):\n\n    res = tuple(map(lambda x,y: x % y, test_tup1, test_tup2))\n    return (res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 617, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 618, "passed": true, "solution": "def div_list(nums1,nums2):\n\n    result = list(map(lambda x, y: x / y, nums1, nums2))\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 619, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 620, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 621, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 622, "passed": true, "solution": "def get_median(arr1, arr2, n):\n\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2)/2\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 623, "passed": true, "solution": "def nth_nums(nums,n):\n\n    result = list(map(lambda x: x**n, nums))\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 624, "passed": true, "solution": "def is_upper(string):\n\n    return string.upper()\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 625, "passed": true, "solution": "def swap_List(newList):\n\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 626, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 627, "passed": true, "solution": "def find_First_Missing(array,start,end):\n\n    if start > end:\n        return end + 1\n    if start != array[start]:\n        return start\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing(array, start, mid)\n    else:\n        return find_First_Missing(array, mid+1, end)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 628, "passed": true, "solution": "MAX=1000;\r\ndef replace_spaces(string):\n\r\n    string = list(string)\r\n    string = [i if i!=' ' else '%20' for i in string]\r\n    return ''.join(string)\r\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 629, "passed": true, "solution": "def Split(list):\n\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 630, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 631, "passed": true, "solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\n\r\n    res = re.sub('\\s', '_', text)\r\n    return res\r\ndef replace_underscores(text):\r\n    res = re.sub('_', ' ', text)\r\n    return res\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 632, "passed": true, "solution": "def move_zero(num_list):\n\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 633, "passed": true, "solution": "def pair_OR_Sum(arr,n) :\n \n    result = 0\n    for i in range(0, n) : \n        for j in range(i + 1, n) : \n            result = result + (arr[i] ^ arr[j]) \n    return result \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 634, "passed": true, "solution": "def even_Power_Sum(n):\n\n    sum = 0\n    for i in range(2,n*2+1,2):\n        sum += i**4\n    return sum\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 635, "passed": true, "solution": "import heapq as hq\r\ndef heap_sort(iterable):\n\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 636, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 637, "passed": true, "solution": "def noprofit_noloss(actual_cost,sale_amount):\n\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 638, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 639, "passed": true, "solution": "def sample_nam(sample_names):\n\n    sum_len = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        sum_len += len(name)\n    return sum_len\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 640, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 641, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 642, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 643, "passed": true, "solution": "import re\r\ndef text_match_wordz_middle(text):\n\r\n    patterns = '\\w*z.\\w*'\r\n    if re.search(patterns,  text):\r\n        return 'Found a match!'\r\n    else:\r\n        return('Not matched!')\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 644, "passed": true, "solution": "def reverse_Array_Upto_K(input, k):\n\n    for i in range(k // 2):\n        input[i], input[k - i - 1] = input[k - i - 1], input[i]\n    return input\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 645, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 646, "passed": true, "solution": "def No_of_cubes(N,K):\n\n    if N < K:\n        return 0\n    else:\n        return (N-K+1)**3\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 647, "passed": true, "solution": "import re\r\ndef split_upperstring(text):\n\r\n    return re.findall('[A-Z][^A-Z]*', text)\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 648, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 649, "passed": true, "solution": "def sum_Range_list(nums, m, n):\n\n    sum = 0\n    for i in range(m, n+1):\n        sum += nums[i]\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 650, "passed": true, "solution": "def are_Equal(arr1,arr2,n,m):\n\n    if n != m:\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 651, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 652, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 653, "passed": true, "solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\n\r\n    d = defaultdict(list)\r\n    for key, value in l:\r\n        d[key].append(value)\r\n    return d\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 654, "passed": true, "solution": "def rectangle_perimeter(l,b):\n\n    perimeter = 2 * (l + b)\n    return perimeter\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 655, "passed": true, "solution": "def fifth_Power_Sum(n) :\n \n    sum = 0\n    for x in range(1, n+1) : \n        sum = sum + (x * x * x * x * x) \n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 656, "passed": true, "solution": "def find_Min_Sum(a,b,n):\n\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(n):\n        res += abs(a[i] - b[i])\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 657, "passed": true, "solution": "import math \r\ndef first_Digit(n) :\n \r\n    fact = math.factorial(n) \r\n    while (fact >= 10) : \r\n        fact = fact / 10\r\n    return int(fact) \n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 658, "passed": true, "solution": "def max_occurrences(list1):\n\n    max_item = None\n    max_count = 0\n    for item in set(list1):\n        if list1.count(item) > max_count:\n            max_item = item\n            max_count = list1.count(item)\n    return max_item\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 659, "passed": true, "solution": "def Repeat(x):\n \n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 660, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 661, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 662, "passed": true, "solution": "def sorted_dict(dict1):\n\n    return {k:sorted(v) for k,v in dict1.items()}\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 663, "passed": true, "solution": "import sys \r\ndef find_max_val(n, x, y):\n\r\n    if n < y:\r\n        return -1\r\n    else:\r\n        max_val = sys.maxsize\r\n        for i in range(n, y, -1):\r\n            if i % x == y:\r\n                max_val = i\r\n                break\r\n        return max_val\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 664, "passed": true, "solution": "def average_Even(n) :\n\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2) :\n        sum = sum + i\n        count += 1\n    return sum/count\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 665, "passed": true, "solution": "def move_last(num_list):\n\n    num_list.append(num_list[0])\n    del num_list[0]\n    return num_list\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 666, "passed": true, "solution": "def count_char(string,char):\n\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 667, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 668, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 669, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 670, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 671, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 672, "passed": true, "solution": "def max_of_three(num1,num2,num3):\n\n    max_num = max(num1,num2,num3)\n    return max_num\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 673, "passed": true, "solution": "def convert(list):\n\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return(res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 674, "passed": true, "solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\n\r\n    return \" \".join(OrderedDict.fromkeys(string.split()))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 675, "passed": true, "solution": "def sum_nums(x, y,m,n):\n\n    sum = x + y\n    if sum in range(m,n):\n        return 20\n    else:\n        return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 676, "passed": true, "solution": "import re\r\ndef remove_extra_char(text1):\n\r\n    result = re.sub(r'\\W+', '', text1)\r\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 677, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 678, "passed": true, "solution": "def remove_spaces(str1):\n\n    str1 = str1.replace(' ','')\n    return str1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 679, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 680, "passed": true, "solution": "def increasing_trend(nums):\n\n    result = True\n    for i in range(1,len(nums)):\n        if nums[i] <= nums[i-1]:\n            result = False\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 681, "passed": true, "solution": "def smallest_Divisor(n):\n\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 682, "passed": true, "solution": "def mul_list(nums1,nums2):\n\n    result = list(map(lambda x,y: x*y, nums1,nums2))\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 683, "passed": true, "solution": "def sum_Square(n) :\n\n    for i in range(1,n+1) :\n        for j in range(1,n+1) :\n            if (i*i + j*j) == n :\n                return True\n    return False\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 684, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 685, "passed": true, "solution": "def sum_Of_Primes(n):\n\n    sum = 0\n    for num in range(2,n + 1):\n        if all(num%i!=0 for i in range(2,num)):\n            sum += num\n    return sum\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 686, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 687, "passed": true, "solution": "def recur_gcd(a, b):\n\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 688, "passed": true, "solution": "import cmath\r\ndef len_complex(a,b):\n\r\n    return cmath.polar(complex(a,b))[0]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 689, "passed": true, "solution": "def min_jumps(arr, n):\n\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 690, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 691, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 692, "passed": true, "solution": "def last_Two_Digits(N):\n\n    fact = 1\n    for i in range(1,N+1):\n        fact = fact * i\n    return fact % 100\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 693, "passed": true, "solution": "import re\r\ndef remove_multiple_spaces(text1):\n\r\n    text2 = re.sub(' +', ' ', text1)\r\n    return text2\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 694, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 695, "passed": true, "solution": "def check_greater(test_tup1, test_tup2):\n\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            result = False\n    return result\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 696, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 697, "passed": true, "solution": "def count_even(array_nums):\n\n    return len(list(filter(lambda x: x % 2 == 0, array_nums)))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 698, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 699, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 700, "passed": true, "solution": "def count_range_in_list(li, min, max):\n\n    ctr = 0\n    for x in li:\n        if min <= x <= max:\n            ctr += 1\n    return ctr\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 701, "passed": true, "solution": "def equilibrium_index(arr):\n\n    left_sum = 0\n    right_sum = sum(arr)\n    for i, num in enumerate(arr):\n        right_sum -= num\n        if left_sum == right_sum:\n            return i\n        left_sum += num\n    return -1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 702, "passed": true, "solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\n\r\n\tarr.sort()\r\n\tmin_rem = n\r\n\tfor i in range(n - 1):\r\n\t\tind = find_ind(arr[i], i, n, k, arr)\r\n\t\tif (ind != -1):\r\n\t\t\tmin_rem = min(min_rem, n - (ind - i + 1))\r\n\treturn min_rem\r\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 703, "passed": true, "solution": "def is_key_present(d,x):\n\n    if x in d:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 704, "passed": true, "solution": "def harmonic_sum(n):\n\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 705, "passed": true, "solution": "def sort_sublists(list1):\n\n    list1.sort(key = lambda x: (len(x), x))\n    return list1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 706, "passed": true, "solution": "def is_subset(arr1, m, arr2, n):\n\n    result = True\n    for i in range(n):\n        if arr2[i] not in arr1:\n            result = False\n            break\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 707, "passed": true, "solution": "def count_Set_Bits(n) :\n \n    count = 0\n    for i in range(1, n + 1) : \n        count += bin(i).count(\"1\") \n    return count \n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 708, "passed": true, "solution": "def Convert(string):\n\n    li = list(string.split(\" \"))\n    return li\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 709, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 710, "passed": true, "solution": "def front_and_rear(test_tup):\n\n    return (test_tup[0], test_tup[-1])\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 711, "passed": true, "solution": "def product_Equal(n):\n\n    even_prod = 1\n    odd_prod = 1\n    while n > 0:\n        even_prod *= n % 10\n        n = n // 10\n        odd_prod *= n % 10\n        n = n // 10\n    return (even_prod == odd_prod)\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 712, "passed": true, "solution": "import itertools\r\ndef remove_duplicate(list1):\n\r\n    list1.sort()\r\n    return list(list1 for list1,_ in itertools.groupby(list1))\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 713, "passed": true, "solution": "def check_valid(test_tup):\n\n    result = True\n    for i in test_tup:\n        if i == None or i == '' or i == 0:\n            result = False\n    return result\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 714, "passed": true, "solution": "def count_Fac(n):\n\n    count = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count += 1\n            n = n / i\n        else:\n            continue\n    return count\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 715, "passed": true, "solution": "def str_to_tuple(test_str):\n\n    res = tuple(map(int, test_str.split(',')))\n    return (res)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 716, "passed": true, "solution": "def rombus_perimeter(a):\n\n    perimeter = 4 * a\n    return perimeter\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 717, "passed": true, "solution": "import math\r\nimport sys\r\ndef sd_calc(data):\n\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 718, "passed": true, "solution": "def alternate_elements(list1):\n\n    list2 = []\n    for i in range(0,len(list1),2):\n        list2.append(list1[i])\n    return list2\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 719, "passed": true, "solution": "import re\r\ndef text_match(text):\n\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n\r\nprint(text_match(\"ac\"))\r\nprint(text_match(\"abc\"))\r\nprint(text_match(\"abbc\"))\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 720, "passed": true, "solution": "def add_dict_to_tuple(test_tup, test_dict):\n\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 721, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 722, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 723, "passed": true, "solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\n\r\n    return sum(map(eq, nums1, nums2))\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 724, "passed": true, "solution": "def power_base_sum(base, power):\n\n    return sum([int(i) for i in str(base**power)])\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 725, "passed": true, "solution": "import re\r\ndef extract_quotation(text1):\n\r\n    result = re.findall(r'\\\"(.+?)\\\"', text1)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 726, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 727, "passed": true, "solution": "import re \r\ndef remove_char(S):\n\r\n    return re.sub('[^A-Za-z0-9]+', '', S)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 728, "passed": true, "solution": "def sum_list(lst1,lst2):\n\n    return [x+y for x,y in zip(lst1,lst2)]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 729, "passed": true, "solution": "def add_list(nums1,nums2):\n\n    return list(map(lambda x, y: x + y, nums1, nums2))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 730, "passed": true, "solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\n\r\n    return [k for k,v in groupby(nums)]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 731, "passed": true, "solution": "import math\r\ndef lateralsurface_cone(r,h):\n\r\n    return math.pi * r * math.sqrt(r**2 + h**2)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 732, "passed": true, "solution": "import re\r\ndef replace_specialchar(text):\n\r\n    result = re.sub(r'[\\s,.]', ':', text)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 733, "passed": true, "solution": "def find_first_occurrence(A, x):\n\n    low = 0\n    high = len(A) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            result = mid\n            high = mid - 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 734, "passed": true, "solution": "def sum_Of_Subarray_Prod(arr,n):\n\n    sum = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            prod = 1\n            for k in range(i,j+1):\n                prod = prod * arr[k]\n            sum = sum + prod\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 735, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 736, "passed": true, "solution": "import bisect\r\ndef left_insertion(a, x):\n\r\n    i = bisect.bisect_left(a, x)\r\n    return i\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 737, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 738, "passed": true, "solution": "def geometric_sum(n):\n\n    if n < 0:\n        return 0\n    else:\n        return 1 / (2 ** n) + geometric_sum(n - 1)\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 739, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 740, "passed": true, "solution": "def tuple_to_dict(test_tup):\n\n    res = dict(zip(test_tup[::2], test_tup[1::2]))\n    return res\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 741, "passed": true, "solution": "def all_Characters_Same(s) :\n \n    return (len(set(s)) <= 1) \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 742, "passed": true, "solution": "import math\r\ndef area_tetrahedron(side):\n\r\n    area = math.sqrt(3) * math.pow(side, 2)\r\n    return area\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 743, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 744, "passed": true, "solution": "def check_none(test_tup):\n\n    if None in test_tup:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 745, "passed": true, "solution": "def divisible_by_digits(startnum, endnum):\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if '0' in num_str:\n            continue\n        is_divisible = True\n        for digit in num_str:\n            if num % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 746, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 747, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 748, "passed": true, "solution": "import re\r\ndef capital_words_spaces(str1):\n\r\n    result = re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\r\n    return result\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 749, "passed": true, "solution": "def sort_numeric_strings(nums_str):\n\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    return nums\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 750, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 751, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 752, "passed": true, "solution": "def jacobsthal_num(n):\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 753, "passed": true, "solution": "def min_k(test_list, K):\n\n    min_k_records = sorted(test_list, key = lambda x: x[1])[:K]\n    return min_k_records\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 754, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 755, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 756, "passed": true, "solution": "import re\r\ndef text_match_zero_one(text):\n\r\n    patterns = 'ab?'\r\n    if re.search(patterns, text):\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'\r\nprint(text_match_zero_one(\"ac\"))\r\nprint(text_match_zero_one(\"abc\"))\r\nprint(text_match_zero_one(\"abbc\"))\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 757, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 758, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 759, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 760, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 761, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 762, "passed": true, "solution": "def check_monthnumber_number(monthnum3):\n\n    if monthnum3 in (4, 6, 9, 11):\n        return True\n    else:\n        return False\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 763, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 764, "passed": true, "solution": "def number_ctr(str):\n\n    ctr = 0\n    for i in str:\n        if i.isnumeric():\n            ctr += 1\n    return ctr\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 765, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 766, "passed": true, "solution": "def pair_wise(l1):\n\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 767, "passed": true, "solution": "def get_Pairs_Count(arr,n,sum):\n\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 768, "passed": true, "solution": "def check_Odd_Parity(x):\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 769, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 770, "passed": true, "solution": "def odd_Num_Sum(n) :\n\n    sum = 0\n    for i in range(1, n*2, 2) :\n        sum = sum + i ** 4\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 771, "passed": true, "solution": "from collections import deque\r\ndef check_expression(exp):\n\r\n    stack = deque()\r\n    for i in exp:\r\n        if i == '(' or i == '{' or i == '[':\r\n            stack.append(i)\r\n        elif i == ')' or i == '}' or i == ']':\r\n            if len(stack) == 0:\r\n                return False\r\n            else:\r\n                stack.pop()\r\n    if len(stack) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 772, "passed": true, "solution": "def remove_length(test_str, K):\n\n    res = []\n    words = test_str.split()\n    for word in words:\n        if len(word) != K:\n            res.append(word)\n    return ' '.join(res)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 773, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 774, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 775, "passed": true, "solution": "def odd_position(nums):\n\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 776, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 777, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 778, "passed": true, "solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\n\r\n    res = [list(g) for k, g in groupby(list1)]\r\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 779, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 780, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 781, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 782, "passed": true, "solution": "def Odd_Length_Sum(arr):\n\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 != 0:\n                for k in range(i, j + 1):\n                    sum += arr[k]\n    return sum\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 783, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 784, "passed": true, "solution": "def mul_even_odd(list1):\n\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n            break\n    for i in list1:\n        if i % 2 != 0:\n            odd_num = i\n            break\n    return even_num * odd_num\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 785, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 786, "passed": true, "solution": "import bisect\r\ndef right_insertion(a, x):\n\r\n    i = bisect.bisect_right(a, x)\r\n    return i\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 787, "passed": true, "solution": "import re\r\ndef text_match_three(text):\n\r\n    if re.search(r\"ab{3}\", text):\r\n        return 'Found a match!'\r\n    else:\r\n        return('Not matched!')\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 788, "passed": true, "solution": "def new_tuple(test_list, test_str):\n\n    res = tuple(test_list) + (test_str,)\n    return (res)\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 789, "passed": true, "solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\n\r\n    perimeter = l * s\r\n    return perimeter\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 790, "passed": true, "solution": "def even_position(nums):\n\n    result = True\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 != 0:\n            result = False\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 791, "passed": true, "solution": "def remove_nested(test_tup):\n\n    res = tuple(i for i in test_tup if not isinstance(i, tuple))\n    return res\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 792, "passed": true, "solution": "def count_list(input_list):\n\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 793, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 794, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 795, "passed": true, "solution": "import heapq\r\ndef cheap_items(items,n):\n\r\n    heap = []\r\n    for item in items:\r\n        heapq.heappush(heap, (item['price'], item))\r\n    return [heapq.heappop(heap)[1] for i in range(n)]\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 796, "passed": true, "solution": "def return_sum(dict):\n\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 797, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 798, "passed": true, "solution": "def _sum(arr):\n\n    return sum(arr)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 799, "passed": true, "solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):\n\r\n    return (n << d)|(n >> (INT_BITS - d))\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 800, "passed": true, "solution": "import re\r\ndef remove_all_spaces(text):\n\r\n    return re.sub('\\s+', '', text)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 801, "passed": true, "solution": "def test_three_equal(x,y,z):\n\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 802, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 803, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 804, "passed": true, "solution": "def is_Product_Even(arr,n):\n\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 805, "passed": true, "solution": "def max_sum_list(lists):\n\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 806, "passed": true, "solution": "def max_run_uppercase(test_str):\n\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 807, "passed": true, "solution": "def first_odd(nums):\n\n    for i in nums:\n        if i % 2 != 0:\n            return i\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 808, "passed": true, "solution": "def check_K(test_tup, K):\n\n    if K in test_tup:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 809, "passed": true, "solution": "def check_smaller(test_tup1, test_tup2):\n\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            result = False\n    return result\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 810, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 811, "passed": true, "solution": "def check_identical(test_list1, test_list2):\n\n    return sorted(test_list1) == sorted(test_list2)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 812, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 813, "passed": true, "solution": "def string_length(str1):\n\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 814, "passed": true, "solution": "def rombus_area(p,q):\n\n    area = (p*q)/2\n    return area\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 815, "passed": true, "solution": "def sort_by_dnf(arr, n):\n\n    low = 0\n    high = n - 1\n    mid = 0\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low = low + 1\n            mid = mid + 1\n        elif arr[mid] == 1:\n            mid = mid + 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high = high - 1\n    return arr\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 816, "passed": true, "solution": "def clear_tuple(test_tup):\n\n    test_tup = test_tup[:0]\n    return test_tup\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 817, "passed": true, "solution": "def div_of_nums(nums,m,n):\n\n    result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 818, "passed": true, "solution": "def lower_ctr(str):\n\n    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 819, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 820, "passed": true, "solution": "def check_monthnum_number(monthnum1):\n\n    if monthnum1 == 2:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 821, "passed": true, "solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\n\r\n    result = ct.ChainMap(dict1,dict2)\r\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 822, "passed": true, "solution": "import re\r\ndef pass_validity(p):\n\r\n    if len(p) < 6 or len(p) > 12:\r\n        return False\r\n    elif not re.search(\"[a-z]\", p):\r\n        return False\r\n    elif not re.search(\"[0-9]\", p):\r\n        return False\r\n    elif not re.search(\"[A-Z]\", p):\r\n        return False\r\n    elif not re.search(\"[$#@]\", p):\r\n        return False\r\n    else:\r\n        return True\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 823, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 824, "passed": true, "solution": "def remove_even(l):\n\n    return [x for x in l if x % 2 != 0]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 825, "passed": true, "solution": "def access_elements(nums, list_index):\n\n    return [nums[i] for i in list_index]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 826, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 827, "passed": true, "solution": "def sum_column(list1, C):\n\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][C]\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 828, "passed": true, "solution": "def count_alpha_dig_spl(string):\n\n    alpha = 0\n    digit = 0\n    spl = 0\n    for i in string:\n        if i.isalpha():\n            alpha += 1\n        elif i.isdigit():\n            digit += 1\n        else:\n            spl += 1\n    return (alpha, digit, spl)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 829, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 830, "passed": true, "solution": "import math\r\ndef round_up(a, digits):\n\r\n    return math.ceil(a * 10**digits) / 10**digits\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 831, "passed": true, "solution": "def count_Pairs(arr,n):\n\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 832, "passed": true, "solution": "import re \r\ndef extract_max(input):\n \r\n    list = [] \r\n    for i in input.split(): \r\n        x = re.findall(\"\\d+\", i) \r\n        for j in x: \r\n            list.append(int(j)) \r\n    return max(list) \r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 833, "passed": true, "solution": "def get_key(dict):\n\n    keys = list(dict.keys())\n    return keys\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 834, "passed": true, "solution": "def generate_matrix(n):\n\n    matrix = [[0 for x in range(n)] for y in range(n)]\n    i, j, di, dj = 0, 0, 0, 1\n    for k in range(n*n):\n        matrix[i][j] = k + 1\n        if matrix[(i+di)%n][(j+dj)%n]:\n            di, dj = dj, -di\n        i += di\n        j += dj\n    return matrix\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 835, "passed": true, "solution": "def slope(x1,y1,x2,y2):\n\n    m = (y2 - y1) / (x2 - x1)\n    return m\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 836, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 837, "passed": true, "solution": "def cube_Sum(n):\n\n    sum = 0\n    for i in range(1,n*2,2):\n        sum += i**3\n    return sum\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 838, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 839, "passed": true, "solution": "def sort_tuple(tup):\n\n    return sorted(tup, key=lambda x: x[0])\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 840, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 841, "passed": true, "solution": "def get_inv_count(arr, n):\n\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 842, "passed": true, "solution": "def get_odd_occurence(arr, arr_size):\n\n    res = 0\n    for i in range(0, arr_size):\n        res = res ^ arr[i]\n    return res\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 843, "passed": true, "solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\n\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 844, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 845, "passed": true, "solution": "import math \r\ndef find_Digits(n):\n \r\n    return math.floor(math.log10(math.factorial(n))) + 1\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 846, "passed": true, "solution": "def find_platform(arr, dep, n):\n \n    arr.sort() \n    dep.sort() \n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n): \n        if (arr[i] < dep[j]): \n            plat_needed+=1\n            i+=1\n            if (plat_needed > result):  \n                result = plat_needed \n        else: \n            plat_needed-=1\n            j+=1\n    return result \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 847, "passed": true, "solution": "def lcopy(xs):\n\n    return list(xs)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 848, "passed": true, "solution": "def area_trapezium(base1,base2,height):\n\n    area = (base1 + base2) * height / 2\n    return area\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 849, "passed": true, "solution": "def Sum(N):\n\n    sum = 0\n    for i in range(2, N):\n        if N % i == 0:\n            isprime = 1\n            for j in range(2, i // 2 + 1):\n                if i % j == 0:\n                    isprime = 0\n                    break\n            if (isprime == 1):\n                sum += i\n    return sum\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 850, "passed": true, "solution": "def is_triangleexists(a,b,c):\n\n    if (a+b+c == 180):\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 851, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 852, "passed": true, "solution": "def remove_negs(num_list):\n\n    return [x for x in num_list if x >= 0]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 853, "passed": true, "solution": "import math\r\ndef sum_of_odd_Factors(n):\n\r\n    sum = 0\r\n    for i in range(1,int(math.sqrt(n))+1):\r\n        if n % i == 0:\r\n            if i % 2 != 0:\r\n                sum += i\r\n            if (n/i) % 2 != 0 and (n/i) != i:\r\n                sum += (n/i)\r\n    return sum\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 854, "passed": true, "solution": "import heapq as hq\r\ndef raw_heap(rawheap):\n\r\n    hq.heapify(rawheap)\r\n    return rawheap\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 855, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 856, "passed": true, "solution": "def find_Min_Swaps(arr,n) :\n \n    arrpos = [*enumerate(arr)] \n    arrpos.sort(key = lambda it:it[1]) \n    vis = {k:False for k in range(n)} \n    ans = 0\n    for i in range(n) : \n        if vis[i] or arrpos[i][0] == i : \n            continue\n        cycle_size = 0\n        j = i \n        while not vis[j] : \n            vis[j] = True\n            j = arrpos[j][0] \n            cycle_size += 1\n        if cycle_size > 0 : \n            ans += (cycle_size - 1) \n    return ans \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 857, "passed": true, "solution": "def listify_list(list1):\n\n    return list(map(list, list1))\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 858, "passed": true, "solution": "def count_list(input_list):\n\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count ** 2\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 859, "passed": true, "solution": "from itertools import combinations\r\ndef sub_lists(my_list):\n\r\n    subs = []\r\n    for i in range(0, len(my_list)+1):\r\n        temp = [list(x) for x in combinations(my_list, i)]\r\n        if len(temp)>0:\r\n            subs.extend(temp)\r\n    return subs\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 860, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 861, "passed": true, "solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\n\r\n    return list(filter(lambda x: Counter(str) == Counter(x), texts))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 862, "passed": true, "solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\n\r\n    words = re.findall(r'\\w+', text.lower())\r\n    return Counter(words).most_common(n)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 863, "passed": true, "solution": "def find_longest_conseq_subseq(arr, n):\n\n    s = set()\n    ans = 0\n    for ele in arr:\n        s.add(ele)\n    for i in range(n):\n        if (arr[i] - 1) not in s:\n            j = arr[i]\n            while (j in s):\n                j += 1\n            ans = max(ans, j - arr[i])\n    return ans\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 864, "passed": true, "solution": "def palindrome_lambda(texts):\n\n    palindromes = list(filter(lambda x: x == x[::-1], texts))\n    return palindromes\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 865, "passed": true, "solution": "def ntimes_list(nums,n):\n\n    result = map(lambda x: x*n, nums)\n    return list(result)\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 866, "passed": true, "solution": "def check_monthnumb(monthname2):\n\n    month_31 = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    if monthname2 in month_31:\n        return True\n    else:\n        return False\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 867, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 868, "passed": true, "solution": "def length_Of_Last_Word(a):\n\n    words = a.split()\n    if len(words) == 0:\n        return 0\n    else:\n        return len(words[-1])\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 869, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 870, "passed": true, "solution": "def sum_positivenum(nums):\n\n    return sum(list(filter(lambda x: x > 0, nums)))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 871, "passed": true, "solution": "def are_Rotations(string1,string2):\n\n    if len(string1) != len(string2):\n        return False\n    temp = string1 + string1\n    if(string2 in temp):\n        return True\n    return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 872, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 873, "passed": true, "solution": "def fibonacci(n):\n\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 874, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 875, "passed": true, "solution": "def min_difference(test_list):\n\n    min_diff = abs(test_list[0][0] - test_list[0][1])\n    for i in range(1, len(test_list)):\n        if abs(test_list[i][0] - test_list[i][1]) < min_diff:\n            min_diff = abs(test_list[i][0] - test_list[i][1])\n    return min_diff\n", "pass_1": 0.6, "pass_k": 1.0, "num_successes": 3}, {"task_id": 876, "passed": true, "solution": "def lcm(x, y):\n\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 877, "passed": true, "solution": "def sort_String(str) :\n\n    return ''.join(sorted(str))\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 878, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 879, "passed": true, "solution": "import re\r\ndef text_match(text):\n\r\n    patterns = '^a.*b$'\r\n    if re.search(patterns,  text):\r\n        return 'Found a match!'\r\n    else:\r\n        return('Not matched!')\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 880, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 881, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 882, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 883, "passed": true, "solution": "def div_of_nums(nums,m,n):\n\n    result = list(filter(lambda x: x % m == 0 and x % n == 0, nums))\n    return result\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 884, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 885, "passed": true, "solution": "def is_Isomorphic(str1,str2):\n\n    if len(str1) != len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1.count(str1[i]) != str2.count(str2[i]):\n                return False\n        return True\n", "pass_1": 0.8, "pass_k": 1.0, "num_successes": 4}, {"task_id": 886, "passed": true, "solution": "def sum_num(numbers):\n\n    return sum(numbers) / len(numbers)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 887, "passed": true, "solution": "def is_odd(n) :\n\n    if n & 1:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 888, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 889, "passed": true, "solution": "def reverse_list_lists(lists):\n\n    return [list(reversed(l)) for l in lists]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 890, "passed": true, "solution": "def find_Extra(arr1,arr2,n) :\n \n    for i in range(n) : \n        if (arr1[i] != arr2[i]) : \n            return i  \n    return n \n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 891, "passed": true, "solution": "def same_Length(A,B):\n\n    if len(str(A)) == len(str(B)):\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 892, "passed": true, "solution": "import re\r\ndef remove_spaces(text):\n\r\n    return re.sub(' +', ' ', text)\r\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 893, "passed": true, "solution": "def Extract(lst):\n\n    return [item[-1] for item in lst]\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 894, "passed": true, "solution": "def float_to_tuple(test_str):\n\n    res = tuple(map(float, test_str.split(',')))\n    return (res)\n", "pass_1": 0.19999999999999996, "pass_k": 1.0, "num_successes": 1}, {"task_id": 895, "passed": true, "solution": "def max_sum_subseq(A):\n\n    incl = 0\n    excl = 0\n    for i in A:\n        new_excl = excl if excl>incl else incl\n        incl = excl + i\n        excl = new_excl\n    return (excl if excl>incl else incl)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 896, "passed": true, "solution": "def last(n):\n return n[-1]\ndef sort_list_last(tuples):\n    return sorted(tuples, key=last)\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 897, "passed": true, "solution": "def is_Word_Present(sentence,word):\n\n    if word in sentence:\n        return True\n    else:\n        return False\n", "pass_1": 1.0, "pass_k": 1.0, "num_successes": 5}, {"task_id": 898, "passed": true, "solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\n\r\n    result = []\r\n    for key, group in groupby(numbers):\r\n        if len(list(group)) >= n:\r\n            result.append(key)\r\n    return result\n", "pass_1": 0.3999999999999999, "pass_k": 1.0, "num_successes": 2}, {"task_id": 899, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}, {"task_id": 900, "passed": false, "solution": null, "pass_1": 0.0, "pass_k": 0.0, "num_successes": 0}]}